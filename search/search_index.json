{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Meta iOS Developer","text":"<p>Welcome to Meta iOS Developer.</p>"},{"location":"table-of-contents/","title":"Meta iOS Developer","text":""},{"location":"table-of-contents/#course-list","title":"Course list","text":"<ul> <li> Introduction Course</li> <li> Version Control Systems</li> <li> Programming Fundamentals in Swift</li> <li> Principles of UI UX Design</li> <li> Create the user interface w/ SwiftUI</li> <li> Advanced Programming in Swift</li> <li> Working with Data in iOS</li> <li> Mobile Development and JavaScript</li> <li> React Basics</li> <li> React Native</li> <li> iOS App Capstone</li> <li> Coding Interview Preparation</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/","title":"The mobile developer role","text":""},{"location":"Introduction/Introduction-Course-Week1-Introduction/#tasks-responsibilities","title":"Tasks &amp; Responsibilities","text":"<ol> <li>Design</li> <li>Building</li> <li>Maintaining<ul> <li>Building User Interface (UI)</li> <li>Writing Code</li> <li>Building animation</li> <li>Integrating Application Program Interface (API)</li> <li>Writing Tests</li> <li>Releasing apps</li> <li>Uploading updates</li> </ul> </li> <li>TeamWork &amp; Collaboration</li> <li>Meetings</li> <li>Design User experience (UX)</li> <li>Server Technology</li> <li>Continuous Integration (CI)</li> </ol>  \u2699 IOS is unique in that it's really, really a clean and slick system.    \ud83d\udca1 Lastly mentorship as you grow more senior, all these technical skills as well as soft skills, it becomes your responsibility to pass that on to that next generation."},{"location":"Introduction/Introduction-Course-Week1-Introduction/#how-to-be-successful-in-this-course","title":"How to be successful in this course","text":"<p>Taking an online course can be overwhelming. How do you learn at your own pace and successfully achieve your goals?</p> <p>Here are\u00a0some general tips\u00a0that can\u00a0help you stay focused and on track.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#set-daily-goals-for-studying","title":"Set daily goals for studying","text":"<p>Ask yourself what you hope to accomplish in your course each day. Setting a clear goal can help you stay motivated and beat procrastination. The goal should be specific and easy to measure, such as \"I\u2019ll watch all the videos in Module 2 and complete the first programming assignment\". And don\u2019t forget to reward yourself when you make progress towards your goal!</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#create-a-dedicated-study-space","title":"Create a dedicated study space","text":"<p>It\u2019s easier to recall information if you\u2019re in the same place where you first learned it, so having a dedicated space at home to take online courses can make your learning more effective. Remove any distractions from the space and if possible, make it separate from your bed or sofa. A clear distinction between where you study and where you take breaks can help you focus.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#schedule-time-to-study-on-your-calendar","title":"Schedule time to study on your calendar","text":"<p>Open your calendar and choose a predictable, reliable time that you can dedicate to watching lectures and completing assignments. This helps ensure that your courses won\u2019t become the last thing on your to-do list.</p> <p>Tip: You can\u202fadd deadlines\u00a0for a Coursera course to your Google calendar, Apple calendar, or another calendar app.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#keep-yourself-accountable","title":"Keep yourself accountable","text":"<p>Tell your friends about the courses you\u2019re taking, post achievements to your social media accounts or blog about your homework assignments. Having a community and support network of friends and family to cheer you on makes a difference!</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#actively-take-notes","title":"Actively take notes","text":"<p>Taking notes can promote active thinking, boost comprehension and extend your attention span. It\u2019s a good strategy to internalize knowledge whether you\u2019re learning online or in the classroom. So, grab a notebook or find a digital app that works best for you and start synthesizing key points.</p> <p>Tip: While watching a lecture on Coursera, you can click the 'Save Note' button below the video to save a screenshot to your course notes and add your own comments.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#join-the-discussion","title":"Join the discussion","text":"<p>Course discussion forums are a great place to ask questions about assignments, discuss topics, share resources and make friends. Our research shows that learners who participate in the discussion forums are 37% more likely to complete a course. So make a post today!</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#do-one-thing-at-a-time","title":"Do one thing at a time","text":"<p>Multitasking is less productive than focusing on a single task at a time. Researchers from Stanford University found that \u201cPeople who are regularly bombarded with several streams of electronic information cannot pay attention, recall information or switch from one job to another as well as those who complete one task at a time.\u201d Stay focused on one thing at a time. You\u2019ll absorb more information and complete assignments with greater productivity and ease than if you were trying to do many things at once.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#take-breaks","title":"Take breaks","text":"<p>Resting your brain after learning is critical to high performance. If you find yourself working on a challenging problem without much progress for an hour, take a break. Walking outside, taking a shower or talking with a friend can help you to re-energize and even give you new ideas on how to tackle the project.</p>"},{"location":"Introduction/Introduction-Course-Week1-Introduction/#your-learning-journey-starts-now","title":"Your learning journey starts now!","text":"<p>While preparing for the module quiz or working on achieving your learning goals you're encouraged to:</p> <ul> <li>Work through each lesson in the learning pathway. Try not to skip any activities or lessons unless you are certain that you already know this information well enough to move ahead.</li> <li>Take the opportunity to go back and watch a video or read all the information provided before moving on to the next lesson or module.</li> <li>Complete\u202fall\u202fthe knowledge and module quizzes and exercises.</li> <li>Read the feedback carefully when answering quizzes, as this will help you to reinforce what you are learning.</li> <li>Make use of\u202fthe\u202fpractical learning environment provided by the exercises. You can gain substantial reinforcement of your learning through the step-by-step application of your skills.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/","title":"What is a mobile app?","text":""},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#mobile-websites","title":"Mobile websites","text":"<p>A mobile website is a website designed, developed, an optimized for mobile devices only. While mobile websites are designed to display and work on major browsers, they still require an internet connection and don't take advantage of the unique functionality of a mobile device.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#mobile-apps","title":"Mobile apps","text":"<p>A mobile app is installable software that runs on mobile devices. Mobile apps user devices hardware and software features and usually provide an efficient, more intuitive and seamless user experience.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#pros","title":"Pros","text":"<ol> <li>mobile apps are faster than mobile websites</li> <li>mobile apps access the device or system resources, such as the location or Bluetooth</li> <li>mobile apps can work without internet access</li> </ol>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#cons","title":"Cons","text":"<ol> <li>mobile apps can be quite expensive to build and more difficult to maintain</li> <li>for a mobile app to be compatible with different platforms like iOS and Android, it is often required that it be built from scratch</li> <li>It may also be difficult to have your app approved by the App Store if it does not meet specific requirements</li> </ol>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#mobile-app-at-meta","title":"Mobile app at Meta","text":"<p>So when we want to build something new or work on a new project at first we set goals for what we want to do for the app or the feature, do we want to grow it? Do we want to spread awareness about it and improve it? Do we want to change how it looks and feels? Do we want to make it more reliable? That's important in knowing what we actually want to do.</p> <p>Now, once execution is complete, what we do is we roll out the experiment and in the experiment we monitor how users are responding to this feature.</p> <p>If we see that the experiment is not performing as well. We ask ourselves the questions why is it not performing as well? Is it not clear to use, can we make it better? Is it not working the way we intend to? Is there a bug somewhere? If the answer to any of those is yes, then we go back iterate on that and then launch another experiment with those fixes and improvements.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#how-does-a-mobile-os-work","title":"How does a mobile OS work?","text":"<p>Learning objective: Explain how a mobile operating system (OS) works</p> <p>The most fundamental software for any smartphone is its operating system (OS). An OS is designed to coordinate communications that occur between the hardware and software resources of mobile devices. Popular platforms such as Android and iOS provide a wide range of software stacks in addition to the built-in OS.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#mobile-operating-systems","title":"Mobile operating systems","text":"<p>A mobile OS typically starts up when a device powers up, displaying different application icons and user interface (UI) elements to users. The overall experience of the application and adapting, swiping or tapping is managed by the mobile OS.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#the-function-of-mobile-operating-systems","title":"The function of mobile operating systems","text":"<p>The major function of mobile operating systems is to allow smartphones, tablets, personal digital assistants (PDAs) and other handheld devices to run applications. The OS provides a channel with which applications can access device resources such as the processor, memory, Wi-Fi, Bluetooth and more. Most of the mobile operating systems in the market are based on open (Android) or closed source (iOS)software.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#popular-mobile-operating-systems","title":"Popular mobile operating systems","text":""},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#android","title":"Android","text":"<p>Android is a mobile OS released in 2008. You\u2019ll likely find that it is the base OS of most phones and tablets worldwide.</p> <p>Android OS is based on a modified version of the Linux kernel and other open-source software. It is built primarily for smartphones, Chromebook, Android TV, Android Auto, as well as wearables such as smartwatches.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#ios","title":"iOS","text":"<p>iOS is Apple\u2019s proprietary OS that runs on the iPhone, iPod Touch and iPad. iOS gives users a multitouch feel, meaning that all user input is via touch gesturing. Through several actions such as swiping, pulling and tapping, users can seamlessly interact with the screen. With built-in sensors such as gyroscopes and accelerometers, Apple devices allow users to switch between the orientations of applications when tilting the devices.</p> <p>With the rise in popularity of iOS, developers now have more controls and access to its features. After the release of iPhone 2.0, Apple also released a software development kit (SDK), which is a set of tools that allows developers to build apps for the OS. Due to huge improvements with iPhone OS 3.0, developers were given more power with core location and push notifications. Finally, multitasking was introduced in iOS 4.0.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#ios-platforms-iphones-and-ipads","title":"iOS platforms - iPhones and iPads","text":"<p>Learning objective: Explain various Apple platforms, including iPhones, iPads and wearables.</p> <p>Over the years, Apple\u2019s operating system has been one of the most preferred operating systems when it comes to mobile devices. It\u2019s incredible to see how it has conveniently powered millions of devices across the world. This operating system is not limited to mobile devices, other non-mobile devices such as TVs, smartwatches, and even cars have been powered by it.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#iphones","title":"iPhones","text":"<p>Every mobile device requires an operating system to function. As for Apple, they developed iOS which was formerly called iphoneOS to power many of their mobile devices. This operating system is specifically designed to run only on Apple devices, which means that other non-Apple products will not be able to use it.</p> <p>Other operating systems such as iPadOS, tvOS, and watchOS that were released later were built from iOS.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#ipados","title":"iPadOS","text":"<p>iPadOS is a mobile operating system designed to power Apple\u2019s tablets, or iPads.</p> <p>Developing apps for this type of device is easy. Let\u2019s say you want your existing app to be available to iPad users. There are various ways you can ensure that your app is responsive when it\u2019s installed on an iPadOS device. This way you never have to write the app from scratch.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#macos","title":"MacOS","text":"<p>macOS, is a Unix based operating system, and is the primary operating system for Apple's Mac computers. It was previously called Mac OS X and later changed to OS X. In the past few years, this OS has become the second most popular desktop OS, after Microsoft Windows and ahead of ChromeOS.</p>"},{"location":"Introduction/Introduction-Course-Week1-Mobile-Platforms/#watchos","title":"WatchOS","text":"<p>Apple Watch is one of the most popular wearables in the health industry. It has helped millions of people achieve their fitness and wellness goals over the years. This smartwatch can function with the help of its operating system called watchOS. It\u2019s an extension of iOS which powers the popular iPhone. The operating system was launched on April 24, 2015, alongside the smartwatch, Apple Watch. As of today, this is the only device that can run the watchOS.</p> <p>The following resources are some additional reading materials that cover iOS platforms, how a mobile OS work, and what mobile apps are all about.</p> <ul> <li>[How mobile OS works](https://www.techtarget.com/searchmobilecomputing/definition/mobile-operating-system#:~:text=A mobile operating system (OS,information and provide application access.)</li> <li>What is mobile development</li> <li>iOS platform</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/","title":"iOS languages: Objective-C vs Swift","text":"<p>Swift is a general purpose multi paradigm that was introduced by Apple in 2014 and is now a supported language in X code, the development environment for Apple's operating system multi paradigm means Swift supports multiple programming paradigms, for example, object oriented programming as well as functional programming.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#why-swift","title":"Why Swift?","text":"<ol> <li>Swift is fast</li> <li>Scalability</li> <li>Safety</li> </ol> <p>Unlike objective C. Swift has a strong typing system and error handling, which prevents occurrence of code crashes and errors in production.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#the-ios-os","title":"The iOS OS","text":"<p>Objective: Identify the key features and characteristics of iOS and iOS Architecture.</p> <p>iOS is one of the most used operating systems across the world. In recent years, it has been powering billions of devices. This OS has now become a complete set of operating systems for various devices such as wearables, mobiles, smart TVs, tablets and so on.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#what-is-ios","title":"What is iOS?","text":"<p>iOS is an operating system primarily designed for touch screen mobile devices such as smartphones. The operating system has evolved in recent years from a mobile OS to an operating system running on other devices such as wearables and smart TVs. It is the basis for three other operating systems made by Apple: iPadOS, tvOS, and watchOS.</p> <p>Below are features and characteristics of the iOS, such as:</p> <ul> <li>It's more secure than other operating systems.</li> <li>iOS provides multitasking features. For example, while working in one application you can easily switch to another one.</li> <li>iOS\u2019s user interface includes multiple gestures like swipe, tap, pinch and reverse pinch.</li> <li>iBooks, iStore, iTunes, Game Center, and Email are all user-friendly.</li> <li>It supplies Safari as the default web browser.</li> <li>It has a powerful API and camera.</li> <li>It has deep hardware and software integration.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#the-ios-architecture","title":"The iOS architecture","text":"<p>The Apple architecture is comprised of different components that any iOS device would need to effectively function. iOS software is built on top of Unix, a multitasking operating system and many other C/C++ libraries exposed via application framework services.</p> <p>Among all the components, Unix provides the main operating system functions for smartphones. An iOS is a stack of software components roughly divided into five sections.</p> <ol> <li>Core Bluetooth framework: The core Bluetooth framework provides the functions needed for your apps to communicate with Bluetooth devices.</li> <li>External accessories framework: It\u2019s used to communicate with accessories that connect to a device with Bluetooth wireless technology.</li> <li>Accelerate framework: Accelerate performs optimized large-scale mathematical computations and image calculations so you can write apps that leverage machine learning, data compression and signal processing.</li> <li>Security services framework: This can be used to protect information, establish trust and control access to software.</li> <li>Local authorization framework: This is used to authenticate a user via Touch ID or Face ID within an app.</li> </ol>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#project-templates","title":"Project templates","text":"<ol> <li>Apps<ol> <li>iOS</li> <li>WatchOS</li> </ol> </li> <li>Games, Software Development Kit (SDK)<ol> <li>SpriteKit</li> <li>Metal</li> </ol> </li> <li>Sticker iMessage</li> <li>Framework</li> <li>Metal Library</li> </ol>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#why-templates","title":"Why Templates?","text":"<ol> <li>Clear projects structure</li> <li>Platform preview</li> <li>Build quickly</li> </ol>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#ios-x-code","title":"iOS X Code","text":"<p>Apple\u2019s Official IDE</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#supported-languages","title":"Supported languages","text":"<ul> <li>Objective-c</li> <li>Swift</li> <li>C++</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#benefits","title":"Benefits","text":"<ul> <li>Complete build system</li> <li>Fast emulator</li> <li>Different devices</li> <li>Free projects template</li> <li>3rd party integrations</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#key-functions","title":"Key Functions","text":"<ul> <li>Toolbar</li> <li>Navigation area</li> <li>Editor area</li> <li>Utility area</li> <li>Debug area</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#ios-app-cheat-sheet","title":"iOS App Cheat Sheet","text":"<p>Building an app requires that you have a clear understanding of relevant concepts needed to start with development. The following concepts will help you get started in development.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#appdelegate","title":"AppDelegate","text":"<p>The app delegate is effectively the foundation of an app and manages some interactions with the system.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#scenedelegate","title":"SceneDelegate","text":"<p>Starting from iOS 13 and later, SceneDelegate takes some responsibilities from AppDelegate. SceneDelegate is responsible for what\u2019s displayed on the screen in terms of user interface (UI) and data.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#viewcontrollers","title":"ViewControllers","text":"<p>ViewControllers present content users can interact with on the screen. These are the only components that deliver interactive content to the user. A ViewController represents something an application can do, and an application often \u201cdoes\u201d several things \u2013 meaning, most applications provide more than one ViewController.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#uiviews","title":"UIViews","text":"<p>In iOS, UIViews are almost indivisible elements that draw themselves to the screen. They can display images, text and more. A combination of all these views forms a design interface that serves a purpose for the user.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#storyboard-files","title":"Storyboard files","text":"<p>In XCode, each storyboard is represented by a .storyboard (dot storyboard) file. These user interface files serve as blueprints for the interface that an application presents to the user.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#project-files","title":"Project files","text":"<p>Xcode project files belong to one of three main categories: configuration, code, and resource. Configuration files define the project structure, code files provide the logic, and resource files are pretty much everything else.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#clicks-and-long-clicks","title":"Clicks and long clicks","text":"<p>By default, all Views detect clicks and long clicks. Users can tap and interact with them.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#anatomy-of-an-ios-app","title":"Anatomy of an iOS App","text":""},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#components","title":"Components","text":"<ul> <li>UIApplication</li> <li>UIApplicationDelegate</li> <li>UserDefaults</li> <li>ViewController</li> </ul>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#uiapplication","title":"UIApplication","text":"<p>The UIApplication is an iOS application starting point and is responsible for initializing and displaying your applications window. It is also responsible for loading your applications first view into the window. Every iOS app has only one instance of UIApplication, and without this component, it's impossible for an iOS app to run successfully.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#uiapplicationdelegate","title":"UIApplicationDelegate","text":"<p>Set of methods to maintain the overall shared behavior of your app. This delegate can be referred to as the root of an app. It works in conjunction with the UIApplication to manage every communication with the operating system.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#uidocument","title":"UIDocument","text":"<p>The iOS UIDocument class is designed to provide an easy to use interface to create and manage documents and content. While UIDocument is used for handling local file systems, such as a read and write operation of data in the app background, it's purpose is primarily to ease the process of storing files using iCloud.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#uiviewcontroller","title":"UIViewController","text":"<p>The UIViewController is the basic building block of your iOS app. This component oversees the activities that happen on screen, from user interfaces to animation, from interaction to navigation, and more. Defines the shared behavior and properties for all types of ViewController that are used in the iOS application.</p>"},{"location":"Introduction/Introduction-Course-Week1-iOS-Developement/#additional-resources","title":"Additional Resources","text":"<p>The following resources are some additional reading materials that cover the iOS and iOS languages.</p> <ul> <li>The iOS</li> <li>Swift vs Objective C</li> </ul>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/","title":"Setting up simulator software","text":"<p>To use the Simulator, ensure you have installed XCode IDE on your computer.</p> <p>Next, click on Window Devices and Simulators.</p> <p>In the next window, click on the plus button on the bottom left of the window to create a new simulator.</p> <p>In the new window, you can specify the name of the simulator, device type and OS version.</p> <p>After creating the simulator, you will be able to see it on the list of available simulators in this window.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#mobile-cpu-architecture","title":"Mobile CPU architecture","text":""},{"location":"Introduction/Introduction-Course-Week2-Simulators/#what-is-a-cpu","title":"What is a CPU?","text":"<p>A CPU is like a middleman that enables software to communicate with the hardware of a device. It can take high-level software instructions and translate them into native machine language that a mobile phone can understand and perform specific operations based on. To deliver the best experience to users, what you most likely want is a CPU that\u2019s a mix of efficiency and power, and doesn't use a lot of resources\u2014something that will be determined by its architecture. A CPU with great architecture provides mobile users with a seamless user experience without consuming a lot of battery resources.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#whats-arm-arm64-and-x86","title":"What\u2019s ARM, ARM64, and x86?","text":"<p>As of now, there are three main CPU architectures used in most smartphones \u2013 ARM, ARM64, and x86.</p> <ul> <li>ARM: ARMv7 or armeabi</li> <li>ARM64: AArch64 or arm64</li> <li>x86: x86 or x86abi</li> </ul> <p>Of these three, ARM is most used because it is optimized for battery use.</p> <p>On the other hand, ARM64 is an extension of the original ARM architecture that provides additional support for more powerful computing in the form of 64-bit processing, and it\u2019s gradually becoming the standard in many newer devices.</p> <p>Another piece of architecture noteworthy to mention is the x86. It is slightly more sophisticated than either type of ARM CPU earlier mentioned but not quite as battery-friendly. Due to this drawback, it is the least common of the three in the computing world.</p> <p>Overall, ARM is more of an embodiment of the mobile-first mentality, with simple sets of instructions, efficiency, and low energy consumption as its main priorities. The fact that it requires fewer transistors and frees up this hardware space more than compensates for the use of RAM in a mobile phone.</p> <p>To develop and deploy apps for different mobile devices, the CPU architecture must be considered. For example, building a social network app for a large audience requires that most mobile devices are targeted.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#os-versions-and-images","title":"OS versions and images","text":"<p>iOS operating system images are just versions of iOS that you can run on a computer. So, if you wanted to test the very latest features you could download the simulator of the latest Apple OS to see what the operating system is like. Or if you wanted to test your app against the iPhone 11 Pro, you could download the iPhone 11 Pro system image and run that.</p> <p>The below table shows the evolution of the OS versions and their architectures.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#common-libraries-and-packages","title":"Common libraries and packages","text":"<p>One of the most fundamental lessons every developer should be aware of is, \u201cdon\u2019t reinvent the wheel.\u201d And understanding how to use libraries and packages in XCode is a big part of that. When you can use a library that does the job efficiently and faster, why spend hours hitting your head against the wall?</p> <p>In other words, if a common task needs to be performed, you may not necessarily need to write the code yourself. It might feel like \u201ccheating\u201d to use someone else\u2019s code to resize a bitmap or modify a string but, in truth, it\u2019s all about getting the work done quickly. This approach is useful, especially for independent developers who don't have much time and resources to throw at every project.</p> <p>Libraries in Xcode extend Xcode SDK capabilities by allowing you to use code written by other developers. The best libraries provide entirely new functionality and let you do some seriously awesome functions with lesser code as a developer. Unlike copying and pasting code, libraries are entirely portable and easy to plug in too. This method makes it easier for developers to access more advanced features with less work and more complexity.</p> <p>Here are various categories in iOS development and the common libraries used in them.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#ios-libraries-image-loading","title":"iOS Libraries - image loading","text":"<p>Image loading libraries are very useful to avoid high memory consumption caused by loading multiple images simultaneously. A typical scenario is a social media app where a user can see photos posted by other users.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#pinremoteimage","title":"PINRemoteImage","text":"<p>PINRemoteImage is an image loading library focused on providing a smooth scrolling experience while an image is loading. PINRemoteImage ensures image loading is as swift and smooth as possible by applying smart caching to minimize storage overhead.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#ios-libraries-videos","title":"iOS Libraries - videos","text":"<p>Displaying videos is usually a daunting task for developers during development. The processes and details to take care of can be too numerous to handle without the use of a library.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#avplayer","title":"AVPlayer","text":"<p>AVPlayer is part of the iOS SDK (Software Development Kit). And it provides an additional interface to control the playback and timing of a media asset such as a video. One of AVPlayer biggest benefits is its ease of customization.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#ios-librariesnetworking","title":"iOS Libraries\u2014Networking","text":"<p>In this internet age, almost every mobile app requires some sort of network request to perform one function or the other. Fortunately, there is a wide range of networking libraries available to help developers optimize this process.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#afnetworking","title":"AFNetworking","text":"<p>AFNetworking is one of the popular networking libraries in iOS development. It provides you with a great way of making internet calls within your iOS application.</p> <p>Simulators can never perfectly emulate any hardware as changes may have occurred to the hardware during production.</p> <p>The following resources are some additional reading materials that cover what a simulator is and how to configure it.</p> <ul> <li>What is a simulator</li> <li>Configure simulator</li> </ul>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#project-structure","title":"Project structure","text":""},{"location":"Introduction/Introduction-Course-Week2-Simulators/#defaults","title":"Defaults","text":"<ul> <li>Source code</li> <li>Assets</li> <li>Test code</li> <li>Build configuration</li> </ul>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#project-main-class","title":"Project main class","text":"<p><code>AppDelegateClass.swift</code></p> <p>In iOS, a view controller class, which is one thing a user can do is an entry point for interacting with the user. This is where the action happens because view controller allows the user to interact with your app. And iOS app is usually made of multiple ViewControllers, sometimes called screens, that together form the user experience.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#xcode-build-system","title":"Xcode Build System","text":"<p>With the build system, the iOS project is managed through a set of build configuration files. This includes defining how a project is to be developed, what dependencies need to exist for the project to build and run successfully, and what the results or results of the compilation process should be.</p> <ul> <li>Build System   When you click the Run button on the Xcode toolbar, this action automatically triggers the build system activity, which in turn starts building the project. After a successful operation, your app starts running on a simulator or a physical device connected to the computer.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#ios-infoplist","title":"iOS info.plist","text":"<p>This file is where you can store information about your app and configure a number of things. It has a key and a value, as well as a type. The keys and values in the file describe the various behaviors and configuration options you want applied to your app bundle.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#project-files","title":"Project files","text":"<p>Learning objective: Identify useful files and directories you can access with Project View.</p> <p>To access the entire file structure of a project including all files hidden within folders from the XCode view, select Project from the tab at the top of the Project window.</p> <p>Choosing Project View allows you to see a lot more files and directories. The most important of these are:</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#module-name","title":"module-name/","text":"<p>AppDelegate</p> <p>The app delegate is effectively the root object of your app, and it works in collaboration with UIApplication to manage some user interactions with the system.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#scenedelegate","title":"SceneDelegate","text":"<p>What is displayed on the screen is the responsibility of SceneDelegate.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#viewcontroller","title":"ViewController","text":"<p>The View Controller is the parent of all the views present on a storyboard. Each application has at least one ViewController. It facilitates the transition between various parts of the user interface.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#main","title":"Main","text":"<p>With the Main.storyboard file you can lay out and design the user interface of your application by adding views such as buttons, table views, and text views onto the editor.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#assets","title":"Assets","text":"<p>This can be used to organize your app's images, icons, colors, and more</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#launchscreen","title":"LaunchScreen","text":"<p>Launch screens appear when your app starts up and give the user the impression that your app is fast and responsive.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#infoplist","title":"Info.plist","text":"<p>Xcode supplies an information property list file when you create a project from a template, as described in \"create a project.\" By default, Xcode names this file Info.plist and adds it to your project as a source file that you can edit.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#module-nametests","title":"module-nameTests/","text":"<p>This folder is responsible for managing code required to test functions within the application.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#module-nameuitests","title":"module-nameUITests/","text":"<p>This folder keeps test files required for testing user interactions with the app user interface.</p>"},{"location":"Introduction/Introduction-Course-Week2-Simulators/#additional-resources","title":"Additional resources","text":"<p>The following resources are some additional reading materials that cover AppDelegate, Info Plist, and Build system.</p> <ul> <li>AppDelegate</li> <li>Managing your app\u2019s information property list</li> <li>Xcode Build System</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/","title":"Project Planning","text":"<p>The decisions you make before you start to code, your project will determine to a great extent the amount of time you spend coding or manipulating libraries or packages. A clear idea allows you to break the app down into principal components of functionality, which is also known as requirements gathering.</p> <p>You need to think about exactly what you want your app to do, asking yourself questions to help guide you and determine the components. Your app will need to make your project idea a reality.</p> <p>The correct approach starts with planning in the form of requirements gathering this involves answering as many questions as possible to determine the necessary components.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#basic-project-planning","title":"Basic project planning","text":"<p>Project planning is one of the most critical stages of software development. It is an important part of commencing any new project. That's because it serves as a roadmap that shows the phases of the project, as well as their start and end dates, and dependencies. By the end of this reading, you should recognize the importance of project planning.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#1-project-performance-and-success-rates","title":"1. Project performance and success rates","text":"<p>Project planning involves comprehensive mapping and organization of project goals, tasks, schedules and resources before anyone assigns project roles and the team starts implementing the plan. With proper planning in place, you can boost the project performance and success rates of a team.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#2-clear-objectives","title":"2. Clear objectives","text":"<p>Having a clear idea of what needs to be achieved greatly increases the likelihood that you will do it. But, without a concise objective from the start, the project will be complicated. If the team isn't clear on what they are working on, it\u2019s almost impossible to know when the project is completed. Proper planning helps the team focus on the most important things: the objectives and the end goal.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#3-resource-allocation","title":"3. Resource allocation","text":"<p>Planning out a project will tell you how many team members you need to execute the project. The plan also allows project managers to monitor which resources have been allocated and thus avoid excessive allocation.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#4-communication","title":"4. Communication","text":"<p>Planning helps communication. With good communication, every team member knows exactly what is required of them ahead of time. A well-written plan will help you communicate key details, making it seamless for you and your entire team to complete specific tasks. Listening to their input and ideas is also a great way to achieve buy-in and foster the commitment of every team member.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#5-project-specific-training","title":"5. Project-specific training","text":"<p>Project planning ensures team members have the required technical know-how to execute the assigned tasks and identifies talent pipelines to provide an adequate supply of trained talents throughout the lifecycle of the project.</p> <p>And those are the basics of project planning!</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#avplayer","title":"AVPlayer","text":"<p>One of the primary uses for smartphones and tablets is to entertain the user by offering them access to quality content. Video is a key form of widely-used content, especially for tablet devices.</p> <p>To achieve this on Apple devices, you can use an AVPlayer, which plays video files on iOS. Read on to learn more!</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#avplayer-for-video-playback","title":"AVPlayer for video playback","text":"<p>The iOS software development kit (SDK) includes two classes that make video playback implementation on iOS devices extremely easy to implement when developing applications.</p> <p>The AVPlayer is the most efficient way to display and play a video in an Apple app. Whenever you add this component to the layout of an activity, it provides a surface onto which a video may be played.</p> <p>The following video formats are currently supported on iOS:</p> <ul> <li>H.263</li> <li>H.264 AVC</li> <li>MPEG-4 SP</li> <li>VP8</li> </ul> <p>Aside from the surface to display a video, it has a wide range of methods that may be called in order to control the playback of video.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#methods-for-controlling-video-playblack","title":"Methods for controlling video playblack","text":"<p>Some of the more commonly used methods for controlling the playback of video include:</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#avplayerurl-urlfileurlwithpath-path","title":"AVPlayer(url: URL(fileURLWithPath: path))","text":"<p>This specifies the path (as a URI) of the video media to be played. This can be either a remote video file URL or a local video file on the device.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#play","title":"play()","text":"<p>When this function is used, it plays the video.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#currenttime","title":"currentTime()","text":"<p>When this function is used, it gets the current time of playback.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#pause","title":"pause()","text":"<p>This function pauses video playback.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#ismuted","title":"isMuted ()","text":"<p>This function returns a Boolean value that indicates whether a video is currently muted.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#avplayerviewcontroller","title":"AVPlayerViewController","text":"<p>The AVPlayerViewController is the UI to control the video. Specifically, it is a view that contains media controls such as \"Play/Pause\", \"Rewind\", \"Fast Forward\" and a progress slider. It synchronizes the controls with the state of the MediaPlayer. By default, the AVPlayerViewController comes with a default set of controls. If you want to make changes to it, you must implement the AVPlayerViewController programmatically within your Swift code.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#storyboards-versus-swiftui","title":"Storyboards versus SwiftUI","text":"<p>An iOS developer today has more options for creating a user interface (UI) layout on iOS than ever before. Most developers are familiar with an interface builder called Storyboard and a toolkit released by Apple called SwiftUI.</p> <p>Let's explore the differences between Storyboards and SwiftUI and the benefits of using Storyboard for creating UI for the time being.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#storyboard","title":"Storyboard","text":"<p>Storyboard is the most popular way to create a UI for iOS applications after its release with iOS 5. By default, any new iOS project created has a Main.storyboard file included in the generated files.</p> <p>A storyboard in Xcode is an empty canvas screen that helps you to create various UIs for an application. This file allows you to move different types of views such as a button and text on its surface. With this interface builder, you can create anything from controllers used to manage interactions on the UI to text and image views. You can add controller screens like a TableView controller or navigation controller by simply dragging and dropping from the object library.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#advantages","title":"Advantages","text":"<ul> <li>It's easy to learn, even for beginners</li> <li>With storyboard you can create a prototype of an app in a few hours, which makes it easy to visualize the app without writing too much code at an early stage of development.</li> <li>The storyboard object library has a wide range of Views such as button and text.</li> <li>The developer community is large so it\u2019s easy to get help whenever you hit a roadblock.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#disadvantages","title":"Disadvantages","text":"<ul> <li>Source control may be intimidating since the storyboard code is in an xml type format. It may be difficult to resolve conflicts during code merging with another developer.</li> <li>As the number of screens keeps growing, managing storyboards can become chaotic as there may be too many files.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#swiftui","title":"SwiftUI","text":"<p>SwiftUI was released alongside iOS 13. It is basically a toolkit released by Apple to help developers create UI in a declarative way using Swift language.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#advantages_1","title":"Advantages","text":"<ul> <li>It\u2019s easy to build and target multiple iOS platform apps (such as macOS, iOS and iPad apps).</li> <li>It offers a combination of drag and drop through Xcode as well as writing code in a Swift file.</li> <li>The code is basic and clean.</li> <li>SwiftUI views can be easily reused by creating smaller module files.</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#disadvantages_1","title":"Disadvantages","text":"<ul> <li>It supports only iOS 13+ and Xcode 11+, so you cannot build apps with lower OS versions using this.</li> <li>It is still relatively new so there aren't as many component options in the SwiftUI as there are in the Storyboard development kit. This means that, to meet app requirements, you must create custom views, such as a search bar.</li> <li>There is no seamless way of switching from Storyboard to SwiftUI. This means developers have to continue using Storyboard for existing apps.</li> <li>The community is small and, as a result, there is less ongoing support for developers for now.</li> </ul> <p>After evaluation the advantages and disadvantages of Storyboard and SwiftUI, it is recommended that you choose Storyboard to create UIs rather than SwiftUI, which is still fairly new.</p> <p>The <code>guard</code> keyword allows you to check a particular statement. If it's valid, then perform the next operation. If not, then just throw an exception.</p> <p><code>AVkit</code> helps you to create interfaces for media playback, which will enable you to create the interface for your video player. The <code>AVkit</code> has an in built AV player that you'll make reference to in order to load or play video.</p> <p><code>AVFoundation</code>, gives you control over different things such as device cameras or processing audio. For your video player app, you'll need to be able to process videos. The <code>AVfoundation</code> helps you configure the audio and video interactions within your UI.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#ios-uiview","title":"iOS UIView","text":"<p>The main building block for the user interface (UI) of an app is a View object that is created from the View class. The View object occupies a rectangular screen area - like the one highlighted below - and is responsible for the processing of drawings and events. The UIView is the base class for widgets that are used to create interactive components of the UI such as buttons and text fields.</p> <p>So, simply put, UIView can be considered a rectangle on the screen that displays a certain type of content. This can be a label, a text, an image, or anything that an iOS app can display. In an actual sense, a view occupies a rectangular shape on any mobile device screen.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#additional-resources","title":"Additional resources","text":""},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#learn-more","title":"Learn more","text":"<p>Here is a list of additional reading material that may consolidate some of the knowledge you've gained so far and be helpful as you continue your learning journey.</p> <ul> <li>AVPlayer</li> <li>SwiftUI vs Storyboard</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#exercise-create-the-player","title":"Exercise: Create the player","text":""},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#aims","title":"Aims","text":""},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#goal","title":"Goal","text":"<p>Create a video player that plays a video file</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#objectives","title":"Objectives","text":"<ul> <li>Create an iOS project</li> <li>Add an mp4 video file to your new project</li> <li>Add import statements AVKit and AVFoundation to your ViewController class</li> <li>Add an override function to ViewController</li> <li>Create a function that plays the video file</li> <li>Call the play function in the override function initially created</li> </ul>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#steps","title":"Steps","text":"<p>Step 1: Create a new project using the Xcode App Template and call it video_player Step 2: Add an mp4 video file to the\u00a0 video_player module in the project Step 8: Run the app on either an simulator or physical device.</p> <p>Note: The the app should have a controller with features such as play, pause and volume as shown in the screenshot above. You should be able to control the playback of the video.</p>"},{"location":"Introduction/Introduction-Course-Week3-Project-Setup/#tips","title":"Tips","text":"<ol> <li>Remember to add the video file to the project before running the app.</li> <li>If you want to choose a simulator, ensure that you setup your simulator properly. You can learn more about simulators in the Simulators section of this course.</li> </ol> ViewController.swift<pre><code>//  ViewController.swift\n//  video_player\nimport UIKit\nimport AVKit\nimport AVFoundation\nclass ViewController: UIViewController  {\noverride func viewDidLoad() {\nsuper.viewDidLoad()\n// Do any additional setup after loading the view.\n}\noverride func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\nplayVideo()\n}\nprivate func playVideo(){\nguard let path=Bundle.main.path(forResource: \"test\", ofType:\"mp4\") else {\ndebugPrint(\"test.mp4 not found\")\nreturn\n}\nlet player = AVPlayer(url: URL(fileURLWithPath: path))\nlet playerController = AVPlayerViewController()\nplayerController.player=player\npresent(playerController, animated: true) {\nplayer.play()\n}\n}\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/","title":"Additional resources","text":""},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#downloading-xcode","title":"Downloading Xcode","text":"<p>Visit the Mac App Store to download Xcode. When downloading Xcode, please note the following:</p> <ol> <li>An Apple ID is required.\u00a0Your Apple ID account holds your sign-in, contact\u00a0and security information that lets you access\u00a0Apple services such as the App Store, Apple Music, iCloud, iMessage, etc.</li> <li>Xcode is free to use. When you are ready to distribute your apps to the App Store, there are different paid membership programs that you can choose from.</li> <li>Downloading and installing Xcode may take several minutes, even hours, to complete. It is recommended to install Xcode in advance\u00a0before continuing your learning journey\u00a0since you will be prompted to complete coding exercises using Xcode playgrounds.</li> </ol> <p>Here is a list of additional resources that may be helpful as you get started with Xcode and Swift.</p> <ul> <li>Xcode Support</li> <li>Apple Developer Program</li> <li>Swift Playground</li> <li>About Swift</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#constants-variables","title":"Constants &amp; Variables","text":"<pre><code>// Constants value doesn\u2019t change\nlet number = 10\nprint(number)\n// 10\n// Variables value can change\nlet age = 20\nprint(number)\n// 20\n</code></pre> <p>Swift will perform type checks before compiling your code.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#how-to-complete-exercises","title":"How to complete exercises","text":"<p>Throughout this course, you will encounter different exercises to practice the programming concepts you learn about.</p> <p>In most exercises, you will be prompted to create a new playground in Xcode. The purpose of this reading is to provide you with a step-by-step guide on creating and launching a new playground in Xcode.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-1-launch-xcode","title":"Step 1: Launch Xcode","text":"<p>Open the Finder application, navigate to the Applications folder and find the Xcode application.</p> <ul> <li>Click on it to launch the application.</li> <li>Once Xcode has launched, you should be presented with the \u201cWelcome to Xcode\u201d window.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-2-create-new-playground","title":"Step 2: Create new playground","text":"<p>Next, from the menu bar at the top of the screen, choose: File &gt; New &gt; Playground\u2026</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-3-select-template","title":"Step 3: Select template","text":"<p>You will be presented with a window asking you to select a template for the new playground.</p> <ul> <li>For the platform, select \"macOS\".</li> <li>Then select the \"Blank\" template.</li> <li>Once you have selected the template, click \"next\".</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-4-save-the-playground","title":"Step 4: Save the playground","text":"<p>A new window will appear with the default name \u201cMyPlayground\u201d.</p> <ul> <li>For each exercise, you may choose to give the playground a unique name.</li> <li>Select the save location.</li> <li>Finally, click the \u201cCreate\u201d button at the bottom right corner of the box.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-5-clear-the-playground","title":"Step 5: Clear the playground","text":"<p>Clear the playground of the default template code so that you have a fresh, clean playground to complete your exercises.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-6-run-your-code","title":"Step 6: Run your code","text":"<p>Once you have completed the exercise, use the \"play\" button to run the code. The playground output appears in the console at the bottom of the playground window.</p> <p>Take note: Should you encounter a \u201cfailure to communicate error\u201d when attempting to run your code, you may restart Xcode and try again.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#exercise-working-with-constants-and-variables","title":"Exercise: Working with constants and variables","text":"<p>In this exercise, you will have the opportunity to practice creating and using constants and variables with different data types. After completing this exercise, you will be able to demonstrate your ability to use Swift basics to implement code for a very basic weather app.</p> <p>Remember, the purpose of this exercise is to practice and build on your existing knowledge. Take your time to complete the individual steps. You will have access to the solution file after completing the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#take-note","title":"Take note:","text":"<p>Swift uses both constants and variables to optimize code. However, from a coding perspective, variables are often more difficult to handle since they can lead to undesirable patterns in your code if used incorrectly. For this reason, the Swift programming guidelines recommend using constants wherever possible and reserving the use of variables for when values will change.</p> <p>In this exercise, you will practice using both constants and variables.</p> <p>You may notice that Xcode issues a warning message when you use variables to store a value that never changes. This message serves as a reminder to use constants where you have only assigned a value once.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#scenario","title":"Scenario","text":"<p>Imagine you are creating a weather app that computes daily and weekly temperatures. You will use constants and variables to define the temperature of the current day of the week and the average temperature for that week.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own weather app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-1-create-a-constant-for-the-day-of-the-week","title":"Step 1: Create a constant for the day of the week","text":"<ol> <li>First, declare a constant for the day of the week. You may recall that to declare a constant you must use the keyword let followed by the constant\u2019s name. For this exercise, call the constant day.</li> <li>Next, set the constant\u2019s value to \"Monday\". To assign the value, add the equal sign after the constant name followed by the string \"Monday\".</li> </ol> <p>A string, as the name suggests, is a string of characters enclosed inside double quotes. Don\u2019t worry too much about this now, you will learn more about strings later.</p> <p>You should now have a line of code that reads: <code>let day = \"Monday\"</code></p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-2-create-a-constant-for-the-temperature","title":"Step 2: Create a constant for the temperature","text":"<ol> <li>In the next line, create another constant for the daily temperature. You may call it dailyTemperature.</li> <li>Set the value to 75.</li> </ol> <p>You should now have a line of code that reads <code>let dailyTemperature = 75</code>.</p> <p>Tip: The dailyTemperature constant\u2019s name uses a naming convention called \u201ccamel case notation\u201d. This is useful because element names cannot contain spaces. Using camel case notation makes compound names easier to read.</p> <p>You should now have two different constants, one with a string value and the other with an integer. You might recall that a constant\u2019s value may never change. Their values can only be set once.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-3-print-the-current-day","title":"Step 3: Print the current day","text":"<p>A print function, otherwise known as a print statement, allows you to \"print\" a message to the output console. For this step, use a print function to print the current day of the week.</p> <ol> <li>In a new line, insert the keyword print followed by parentheses. It should read like this: <code>print()</code></li> <li>Next, inside the parentheses, add the description that you would like to display in the console when the print function is executed. For example, <code>\"Today is\u2026\"</code>.</li> <li>Finally, reference the constant in the print function. To do this, insert a backslash followed by the constant\u2019s name in parentheses. For example <code>\"\\(day)\"</code>. This is called \u201cstring interpolation\u201d.</li> </ol> <p>You should now have a print function that reads: <code>print(\"Today is \\(day)\")</code>.</p> <p>Notice that the sentence inside the print function is also enclosed in double quotes.</p> <p>You can also insert text after the constant. For example, try adding \u201cRise and shine!\u201d as a new sentence in the same print function.</p> <p>Run your code and review the output.</p> <p>Tip: To run your code, click on the checkbox above the console. You should now have the sentence <code>\"Today is Monday. Rise and shine!\" displayed in the console.</code></p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-4-print-the-daily-temperature","title":"Step 4: Print the daily temperature","text":"<p>Next, create a new print function to include the dailyTemperature constant. This will allow you to print the current day of the week and the daily temperature. For example, you may create the print function to read: <code>\"The temperature on \\(day) is \\(dailyTemperature)\u00b0F\"</code></p> <p>Run your code and review the output in the console.</p> <p>As you may have noticed, you can print as many custom values inside the same print function as you'd like.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-5-create-a-variable","title":"Step 5: Create a variable","text":"<p>Next, you will create a variable that stores the current temperature on a given day.</p> <p>Since the current temperature may fluctuate throughout the day, the value of the variable may change. For this reason, you will use a variable as opposed to a constant.</p> <ol> <li>In a new line, create a variable by inserting the keyword var followed by the variable name. In this case, call it temperature.</li> <li>Set the initial value to 70.</li> </ol> <p>You should now have a line of code that reads <code>var temperature = 70</code>.</p> <p>For the purpose of this exercise, the value represents the temperature of Monday morning. You will have the opportunity to change this value later.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-6-print-the-morning-temperature","title":"Step 6: Print the morning temperature","text":"<p>Print the morning temperature of the current day to the console. To achieve this, you will include the day constant as well as the temperature variable.</p> <p>Run your code and review the output in the console. The output should read: <code>\"The temperature on Monday morning is 70\u00b0F.\"</code></p> <p>Don\u2019t worry if you did not get the same result right away. Refer to step 3 to refresh your memory on using the print function. If you are still stuck, you may review the solution code in the next reading after completing this exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-7-change-the-value","title":"Step 7: Change the value","text":"<p>Next, practice changing the value of the temperature variable by setting it to 80.</p> <p>To do this, insert <code>temperature = 80</code> in a new line. This value represents the evening temperature.</p> <p>Note that you should not include the var keyword again. This is because you are adjusting a variable\u2019s value, as opposed to creating a new one.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-8-print-the-evening-temperature","title":"Step 8: Print the evening temperature","text":"<p>Print the evening temperature of the current day to the console.</p> <p>Run your code and review the output in the console. The output should read: \"The temperature on Monday evening is 80\u00b0F.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-9-create-another-constant","title":"Step 9: Create another constant","text":"<p>Create a constant that stores the average temperature of the week. Call it weeklyTemperature and set its value to 75.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-10-set-the-value-of-a-variable-based-on-the-value-of-another-constant","title":"Step 10: Set the value of a variable based on the value of another constant","text":"<p>Update the value of the temperature variable to the value of the weeklyTemperature constant. This makes sure the weather app is focusing on the average temperature of the week.</p> <p>To achieve this, set temperature equal to weeklyTemperature.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-11-print-the-average-weekly-temperature","title":"Step 11: Print the average weekly temperature","text":"<p>Print the average temperature of the week to the console by referencing the temperature variable in a new print function.</p> <p>Now run your code. The output to the console should read: \"The average temperature this week is 75\u00b0F.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-12-review-the-output-in-the-console","title":"Step 12: Review the output in the console","text":"<p>After running your program, review the output in the console and note it down.</p> <p>The first printed statement should be: \"Today is Monday. Rise and shine!\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you practiced creating and using variables to store values. You also learned how to use the print function to output these values to the console.</p> <pre><code>let day = \"Monday\"\nlet dailyTemperature = 75\nprint(\"Today is \\(day), Rise and shine!\")\nprint(\"The temperature on \\(day) is \\(dailyTemperature)\u00b0F.\")\nvar temperature = 70\nprint(\"The temperature on \\(day) morning is \\(temperature)\u00b0F.\")\ntemperature = 80\nprint(\"The temperature on \\(day) evening is \\(temperature)\u00b0F.\")\nlet weeklyTemperature = 75\nprint(\"The average temperature this week is \\(weeklyTemperature)\u00b0F.\")\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#exercise-operators-and-data-types","title":"Exercise: Operators and data types","text":"<p>You've learned that operators allow you to perform operations on variables and values to manipulate individual data items and return a specific result. Now to put theory to practice, you will explore how to use operators to perform simple calculations using different data types.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#scenario_1","title":"Scenario","text":"<p>Suppose you are creating a simple game with multiple levels. After completing each level, the player receives a score. You will use operators and data types to tally up the total game score based on the player\u2019s performance in each level. You will also compute the current level\u2019s average score.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#instructions_1","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode. Once you have created a new playground, follow the steps below to create your very own game with multiple levels.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-1-create-constants-and-variables","title":"Step 1: Create constants and variables","text":"<p>Create a constant and variable for the game\u2019s score and the current level\u2019s score.</p> <ol> <li>First, declare a constant for the current level\u2019s score. For example,<code>let levelScore = 10</code>.</li> <li>Next, create a variable for the game\u2019s score. You may call it gameScore. Set its value to 0.</li> </ol> <p>Note: The levelScore constant and gameScore variable names use \u201ccamel case notation\u201d. This makes them easy to identify and read.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-2-update-the-games-score","title":"Step 2: Update the game\u2019s score","text":"<p>Use the addition assignment operator (<code>+=</code>) to add the current level\u2019s score to the game\u2019s score.</p> <p>The operator performs two different operations at the same time. It first adds the values of the gameScore variable and levelScore constant and then assigns the result to the gameScore variable.</p> <p>You should now have a line of code that reads <code>gameScore += levelScore</code>.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-3-print-the-games-score","title":"Step 3: Print the game\u2019s score","text":"<p>Use the print statement to print the game\u2019s score to the console. You can add any custom description to the print statement, for example: \u201cThe game\u2019s score is\u2026\u201d. This will output the description with a value to the console.</p> <p>Tip: Remember to use backslash with the gameScore variable in parenthesis in your print statement. This is called \u201cstring interpolation\u201d.</p> <p>Now run your code and review the output. The following should display in the console: \"The game's score is 10.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-4-create-a-floating-point-variable","title":"Step 4: Create a floating point variable","text":"<p>In some cases, the score will not incur an entire point and partial points might need to be awarded.</p> <p>Create a variable that stores the current level\u2019s bonus score: Call it levelBonusScore and set its initial value to 10.0.</p> <p>Tip: Recall that this type of value is called a floating point value.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-5-change-the-value-of-the-floating-point-variable","title":"Step 5: Change the value of the floating point variable","text":"<p>Next, try to change the value of the levelBonusScore variable to 20. You can do this by inserting the following code in a new line:</p> <p>levelBonusScore = 20</p> <p>You may think that the levelBonusScore variable can also store integer values. The next step proves that this is not the case.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-6-print-the-current-levels-bonus-score","title":"Step 6: Print the current level\u2019s bonus score","text":"<p>Print the current level\u2019s bonus score to the console by inserting the following line of code: <code>print(\"The level's bonus score is \\(levelBonusScore).\")</code></p> <p>Run your code and review the output in the console. Notice the value of the levelBonusScore variable is 20.0 instead of 20. This is because the variable only stores floating point values.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-7-compute-the-games-final-score","title":"Step 7: Compute the game\u2019s final score","text":"<p>Next, you are going to add the current level\u2019s bonus score to the game\u2019s final score with the addition assignment operator. Note that you must first convert the current level\u2019s bonus score to an integer value. This is because you can\u2019t add floating point values to integer values.</p> <ol> <li>First insert the gameScore variable followed by the addition assignment operator (+=).</li> <li>Then specify the type you would like the levelBonusScore to change to. Since it needs to be an integer, use the keyword Int.</li> <li>Finally, insert the levelBonusScore variable inside parentheses.</li> </ol> <p>You should now have a line of code that reads: <code>gameScore += Int(levelBonusScore)</code></p> <p>Tip: This method of changing the type is called \u201ctype casting\u201d.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-8-print-the-games-final-score","title":"Step 8: Print the game\u2019s final score","text":"<p>Now that you have added the bonus level score to the total game score, print the game\u2019s final score to the console and run your code.</p> <p>The output in the console should read: \"The game's final score is 30.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-9-create-additional-constants","title":"Step 9: Create additional constants","text":"<p>Next, suppose the game uses the player\u2019s average score to determine if they qualify for a bonus level. Before you can determine the average, you must first identify the lowest and highest scores and define the total levels in the game.</p> <p>Create constants for the current level\u2019s lowest and highest scores and the number of levels in the game.</p> <ol> <li>First, declare a constant for the current level\u2019s lowest score. For example, <code>let levelLowestScore = 50</code>.</li> <li>Next, create a constant for the current level\u2019s highest score. You may call it levelHighestScore. Set its value to 99.</li> <li>Finally, define a constant that stores the number of levels of the game. Call it levels and set its initial value to 10.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-10-compute-the-current-levels-average-score","title":"Step 10: Compute the current level\u2019s average score","text":"<p>Next, use the previously declared constants to determine the current level\u2019s average score. For this step, you will create new constants and use operators to define their values.</p> <ol> <li>First, subtract the current level\u2019s lowest score from the current level\u2019s highest score. Store the result in a new constant called levelScoreDifference.</li> <li>Next, divide the value determined in the previous step by the number of levels to get the current level\u2019s average score. Store the result in a new constant called levelAverageScore.</li> </ol> <p>The current level\u2019s average score isn\u2019t quite accurate in this case. You will explore why that happens in the following steps.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-11-print-the-current-levels-average-score","title":"Step 11: Print the current level\u2019s average score","text":"<p>Print the current level\u2019s average score to the console and run your code. The output in the console should read: \"The level's average score is 4.\"</p> <p>Notice the value of the averageLevelScore constant is 4 instead of 4.9. This is because when you divide two integers, an integer value is returned. You will fix this in the next step.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-12-update-the-current-levels-average-score","title":"Step 12: Update the current level\u2019s average score","text":"<p>Use type casting to convert levelScoreDifference and levels to floating point constants before dividing them. Store the result in a new constant called averageLevelScore.</p> <p>Tip: Previously you used the keyword Int to change the value to an integer, for this step you must use the keyword Double to change an integer value to a floating point.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-13-print-the-updated-current-levels-average-score","title":"Step 13: Print the updated current level\u2019s average score","text":"<p>Print the updated current level\u2019s average score to the console and run your code.</p> <p>The output in the console should read: \"The level's average score is 4.9\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-14-review-the-output","title":"Step 14: Review the output","text":"<p>After running your program, review and note down the output.</p> <p>The first printed statement should be: \"The game's score is 10.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you practiced using compound assignment operators to update the values of variables. You also used type casting to change the types of constants and variables.</p> <pre><code>let levelScore = 10\nvar gameScore = 0\ngameScore += levelScore\nprint(\"The game's score is \\(gameScore).\")\nvar levelBonusScore = 10.0\n// levelBonusScore will be float even an integer assign to it!\nlevelBonusScore = 20\nprint(\"The level's bonus score is \\(levelBonusScore).\")\ngameScore += Int(levelBonusScore)\nlet levelLowestScore = 50\nlet levelHighestScore = 99\nlet levels = 10\n/*\nlet levelScoreDifference = (levelHighestScore - levelLowestScore) / levels\n// Should be 4.9 NOT 4 (because two Int\nprint(\"The level's average score is \\(levelScoreDifference).\")\n */\nlet levelScoreDifference = Float(levelHighestScore - levelLowestScore)\nlet averageLevelScore = levelScoreDifference / Float(levels)\nprint(\"The level's average score is \\(averageLevelScore).\")\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#strings-methods","title":"Strings Methods","text":"<pre><code>let quote = \"Hello World\"\n// Check Prefix\nquote.hasPrefix(\"H\")    // true\nquote.hasPrefix(\"h\")    // false\n// Check Suffix\nquote.hasSuffix(\"D\")    // false\nquote.hasSuffix(\"d\")    // true\nquote.uppercased()    // HELLO WORLD\nquote.lowercased()    // hello world\n// Count lenght of String\nlet theCount = quote.count    // 11\nlet longString = \"\"\" hello there\n                    bye\n                    \"\"\"\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#exercise-working-with-strings-in-swift","title":"Exercise: Working with strings in Swift","text":"<p>In this exercise, you will practice working with strings to implement a very basic calendar app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#scenario_2","title":"Scenario","text":"<p>Suppose you are creating a calendar app that works with different time zones. You will use strings to determine the current day of the week and the current time and time zone.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#instructions_2","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own calendar app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-1-create-constant","title":"Step 1: Create constant","text":"<p>Create a constant for the current day of the week. For example, let day equal \"Monday\".</p> <p>Tip: Remember to use double quotes for the day\u2019s name since it is a string.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-2-print-the-current-day","title":"Step 2: Print the current day","text":"<p>Use the print statement to print the current day of the week to the console. You can add any custom description to the print statement, for example: \"Today is\u2026\". This will output the description with a value to the console.</p> <p>Tip: Remember to use backslash with the day constant in parentheses in your print statement. Recall that this is called \u201cstring interpolation\u201d.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-3-create-more-constants","title":"Step 3: Create more constants","text":"<p>Create constants for the current time\u2019s components.</p> <p>You will insert the values as strings instead of integers for the current hour and minutes. This is because it is easier to determine the current time if all of its components are already strings. Don\u2019t worry about the time zone yet.</p> <ol> <li>First, declare a constant for the current hour. For example, let hour equal \"6\".</li> <li>Next, create a constant for the minutes. You may call it minutes. Set its value to \"15\".</li> <li>Finally, define a constant that stores the current period of the day. Call it period and set its initial value to \"PM\".</li> </ol> <p>You should now have three constants that you will use in the next step of the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-4-determine-the-current-time","title":"Step 4: Determine the current time","text":"<p>Next, determine the current time.</p> <ol> <li>First, create a variable for the current time and call it time.</li> <li>Then, use string concatenation with the addition operator to determine the current time from its components.</li> <li>Finally, assign the result to the time variable.</li> </ol> <p>You should now have a line of code that reads: var time = hour + \":\" + minutes + \" \" + period</p> <p>Tip: Recall that string concatenation describes the action of adding components, like other strings, together.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-5-print-the-current-time","title":"Step 5: Print the current time","text":"<p>Print the current time to the console and run your code.</p> <p>The output on the console should read: \"It is 6:15 PM.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-6-print-the-current-time-and-day","title":"Step 6: Print the current time and day","text":"<p>Print the current time and day to the console. You may print as many custom values as you wish with the same print statement.</p> <p>Run your code and review the output. The output on the console should read: \"It is 6:15 PM on Monday.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-7-determine-the-current-time-zone","title":"Step 7: Determine the current time zone","text":"<p>Create a constant that stores the current time zone. Call it timezone and set its value to \"PST\".</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-8-update-the-current-time","title":"Step 8: Update the current time","text":"<p>Use the addition assignment operator with string interpolation to add the current time zone to the current time.</p> <p>Your code should read: <code>time += \" \\(timezone)\"</code></p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-9-print-the-updated-time","title":"Step 9: Print the updated time","text":"<p>Print the updated time to the console and run your code.</p> <p>The output on the console should read: \"It is 6:15 PM PST.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-10-print-the-updated-time-and-current-day","title":"Step 10: Print the updated time and current day","text":"<p>Print the updated time and current day to the console.</p> <p>The output on the console should read: \"It is 6:15 PM PST on Monday.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-11-determine-the-short-name-for-a-given-day","title":"Step 11: Determine the short name for a given day","text":"<p>Next, configure the calendar app to display the short name of the current day of the week. For example, Wednesday's short name is Wed and Sunday's short name is Sun.</p> <ol> <li>Declare a constant called shortDay.</li> <li>Use the prefix method on day. In the method parameter, pass in 3 to retrieve the initial three elements of a string.</li> </ol> <p>Your code should read:</p> <p><code>let shortDay = day.prefix(3)</code></p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-12-print-the-short-name-of-the-current-day","title":"Step 12: Print the short name of the current day","text":"<p>Print the short name of the current day of the week to the console and run your code.</p> <p>The output on the console should read: \"Today is Mon.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#step-13-print-the-short-name-of-the-current-day-and-the-final-time","title":"Step 13: Print the short name of the current day and the final time","text":"<p>Print the short name of the current day of the week and the final time to the console.</p> <p>Run your code and review the output. The output on the console should read: \"It is 6:15 PM PST on Mon.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#concluding-thoughts_2","title":"Concluding thoughts","text":"<p>In this exercise, you practiced using string concatenation to add multiple strings together. You also used string interpolation to print custom values to the console.</p> <pre><code>let day = \"Monday\"\nprint(\"Today is \\(day).\")\nlet hour = \"6\"\nlet minutes = \"15\"\nlet period = \"PM\"\nvar time = hour + \":\" + minutes + \" \" + period\nprint(\"It is \\(time) on \\(day).\")\nlet timezone = \"PST\"\ntime += \" \\(timezone)\"\nprint(\"It is \\(time).\")\nprint(\"It is \\(time) on \\(day).\")\nlet shortDay = day.prefix(3)\nprint(\"Today is \\(shortDay).\")\nprint(\"It is \\(time) on \\(shortDay).\")\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Basics/#additional-resources_1","title":"Additional resources","text":"<p>The following resources from the Swift Programming Language Guide may be helpful as you continue your learning journey:</p> <ul> <li>Swift Basics</li> <li>Basic Operators</li> <li>Strings and Characters</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/","title":"Conditions","text":"<p>Generally, comparison operators return a Boolean of true or false by comparing two values, while logical operators allow you to evaluate more than one condition at a time.</p> Operator Meaning <code>&amp;&amp;</code> AND ll Or <code>!</code> Not <code>^</code> Exclusive or <code>==</code> Equal <code>!=</code> Not equal <code>&gt;=</code>, <code>&gt;</code> Greater <code>&lt;=</code> , <code>&lt;</code> Less than"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#ifelse-elseif","title":"<code>if/else else/if</code>","text":"<pre><code>let num = 2\nif num == 1 {\nprint(\"First\")\n}\nelse if num == 2 {\nprint(\"Second\")\n}\nelse {\nprint(\"Not in top 2!\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#switch-statements","title":"Switch statements","text":"<p>Now that you have a better understanding of conditionals like if and if else statements, you are ready to learn about another statement that lets you test conditions. More specifically, you will be introduced to switch statements. In this reading, you will learn what they are, why they are used, and most importantly, how to use them in your code.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#what-are-switch-statements","title":"What are switch statements?","text":"<p>Switch statements are conditional statements that compare the value of a constant or variable with a fixed set of values. If the constant or variable\u2019s value matches one of the values in the set, then the block of code associated with that value gets executed.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#why-do-programmers-use-them","title":"Why do programmers use them?","text":"<p>Switch statements behave like else if statements.</p> <p>Switch statements have two big advantages over else if statements:</p> <ul> <li>They are easier to both read and write because you don\u2019t have to repeat the name of the constant or variable like you do in each if or else if branch of an if else if statement. The name of the constant or variable appears only once in the switch statement and each value in the set is defined as a separate switch case.</li> <li>They are exhaustive so you always have to cover all possible cases. This doesn\u2019t happen with if else if statements since there is no way of telling if all options have been handled with if, else if or else branches.</li> </ul> <p>You will explore these advantages with relevant examples next.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#switch-statements-in-practice","title":"Switch statements in practice","text":"<p>Let\u2019s start with an if else if statement and then convert it to a switch statement.</p> <p>Imagine you are creating a weather app that works with different languages. You use else if statements to check what the default language is set to.</p> <pre><code>let language = \"English\"\nif language == \"English\" {\nprint(\"The default language is set to English.\")\n} else if language == \"Spanish\" {\nprint(\"The default language is set to Spanish.\")\n} else {\nprint(\"The default language has not been configured yet.\")\n}\n</code></pre> <p>The language constant appears in each if and else if branch of the above statement. This behavior can be simplified with switch statements.</p> <pre><code>let language = \"English\"\nswitch language {\ncase \"English\": print(\"The default language is set to English.\")\ncase \"Spanish\": print(\"The default language is set to Spanish.\")\ndefault: print(\"The default language has not been configured yet.\")\n}\n</code></pre> <p>The language constant appears only once this time. Each switch case defines a possible value for the language constant. The default case handles all of the values that aren\u2019t declared in any of the previous cases. This makes sure the switch statement is always exhaustive.</p> <p>Default cases of switch statements aren\u2019t required to do anything in particular even if they are always present to make switch statements exhaustive.</p> <pre><code>let language = \"English\"\nswitch language {\ncase \"English\": print(\"The default language is set to English.\")\ncase \"Spanish\": print(\"The default language is set to Spanish.\")\ndefault: break\n}\n</code></pre> <p>The above switch statement uses the break statement inside the default case. Since the default case can\u2019t be empty, the break statement simply concludes the switch statement. If you leave the default case empty, you will receive an error.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#concluding-thoughts","title":"Concluding thoughts","text":"<p>Switch statements are conditional statements that match constants and variables with certain values. They allow you to write code that\u2019s exhaustive and easier to read and write.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#exercise-work-with-conditional-statements-in-swift","title":"Exercise: Work with conditional statements in Swift","text":"<p>In this exercise, you will practice creating and working with conditional statements to implement a very basic weather app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#scenario","title":"Scenario","text":"<p>You might recall that in an earlier exercise, you implemented code for a basic weather app to display the temperature of a specific day. In this exercise, you will apply programming concepts that configure the app to work with Fahrenheit degrees. You will use conditional statements and logical operators to check the configuration of the weather app and display its settings.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own weather app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#tips","title":"Tips","text":"<ul> <li>Boolean constants only have two possible values: true and false.</li> <li>You can use three types of conditions in your code: if statements, if else statements and if else if statements.</li> <li>The OR logical operator evaluates the compound condition to true if and only if either of its conditions are true.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-1-create-a-boolean-constant","title":"Step 1: Create a Boolean constant","text":"<p>For the first step of the exercise, you will create a Boolean constant to determine if users are using the free or paid version of the app.</p> <ol> <li>Create a Boolean constant named freeApp.</li> <li>Set the value to true.</li> </ol> <p>Boolean constants only have two possible values: true and false. In this case, the Boolean will indicate whether users are either running the free version of the app, or the paid version.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-2-check-the-status-of-the-app","title":"Step 2: Check the status of the app","text":"<p>Use a simple if statement to check which version of the app is currently running.</p> <p>Tip: The condition should use the equality comparison operator ( == ) to check if the freeApp constant is true.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-3-print-the-status-of-the-app","title":"Step 3: Print the status of the app","text":"<p>Use the print statement to print the following message if the status is true: \"You are using the free version of the app. Buy the full version of the app to get access to all of its features.\"</p> <p>Tip: Place the print statement between the curly brackets of the if statement.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-4-create-temperature-constants","title":"Step 4: Create temperature constants","text":"<p>Next, create constants to store the morning and evening temperatures of the current day.</p> <ol> <li>First, create a constant that stores the morning temperature of the current day. Name it morningTemperature and set its value to 70.</li> <li>Next, create a constant that stores the evening temperature of the current day. Call it eveningTemperature and set its value to 80.</li> </ol> <p>You should now have two constants that you will use in the next step of the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-5-check-the-daily-temperature","title":"Step 5: Check the daily temperature","text":"<p>Use an if else statement to check which time of day has the coldest temperature.</p> <p>Tip: The condition should use the less than operator (&lt;)to test if the morning\u2019s temperature is less than the evening\u2019s temperature. The if block will run if the condition is true, while the else block should run if the condition is false.</p> <ol> <li>Add a print statement inside the if block that prints the morning\u2019s weather report to the console.</li> <li>Add a print statement inside the else block that prints the evening\u2019s weather report to the console.</li> </ol> <p>Run your code and review the output in the console. If your if else statement runs correctly, you should notice that only the print statement from the if block outputs to the console since the condition is true.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-6-check-the-apps-default-settings","title":"Step 6: Check the app\u2019s default settings","text":"<p>Next, you are going to use the if else statement to check that the app is configured to Fahrenheit degrees as a default temperature setting.</p> <ol> <li>First create the default setting by declaring a constant that stores the degree. Name it temperatureDegree and set its value to \"Fahrenheit\".</li> <li>Next create an if else statement to confirm that the app uses Fahrenheit degrees.</li> <li>Then add a print statement inside the if block that prints that the app uses Fahrenheit degrees.</li> <li>Finally, add a print statement inside the else block that prints that the app uses Celsius degrees.</li> </ol> <p>Run your code and review the output in the console. The output should confirm that the app defaults to Fahrenheit degrees.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-7-check-if-the-app-is-using-fahrenheit-or-celsius","title":"Step 7: Check if the app is using Fahrenheit OR Celsius","text":"<p>Now you need to check that Fahrenheit or Celsius is being used and ensure another temperature scale such as Kelvin is not being used. To achieve this, you will use conditions and logical operators.</p> <ol> <li>First, create an if else statement that uses the logical OR operator to check if the app uses Fahrenheit or Celsius degrees. The compound condition is true if and only if either of its conditions is true and false otherwise.</li> <li>Then print inside the if block that the app is configured properly.</li> <li>Finally, print inside the else block that the app isn\u2019t configured properly.</li> </ol> <p>Run your code and review the output to the console. The printed statement should indicate that the app is configured correctly since at least one of the conditions is true.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-8-check-what-region-the-app-is-configured-for","title":"Step 8: Check what region the app is configured for","text":"<p>Finally, you are going to check what specific region the app is configured for by evaluating the default temperature degree.</p> <ol> <li>Declare a switch statement that selects the right temperature degree type from the list of temperature degree types provided by the app. The switch statement switches on the temperatureDegree constant and prints the app configuration to the console.</li> <li>Print to the console that the app is configured for the US in the first switch case of the switch statement. The temperatureDegree constant\u2019s value you test is \"Fahrenheit\" in this case. This means that the app uses Fahrenheit degrees for its temperature.</li> <li>Print to the console that the app is configured for Europe in the second switch case of the switch statement. The temperatureDegree constant\u2019s value you test is \"Celsius\" in this case. This means that the app uses Celsius degrees for its temperature.</li> <li>Add a default case to the switch statement in order to make it exhaustive. The default case handles all values of the temperatureDegree constant that other switch cases don\u2019t handle. Print to the console that the app has an unknown configuration in this case. This means that the app doesn\u2019t use either Celsius or Fahrenheit degrees for its temperature.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#step-9-run-your-code","title":"Step 9: Run your code","text":"<p>Run your program and note down the output.</p> <p>The first printed statement should be: \"You are using the free version of the app. Buy the full version of the app to get access to all of its features.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you practiced using conditional statements and logical operators to configure a simple weather app to work with Fahrenheit degrees.</p> <pre><code>let freeApp = true\nif freeApp == true {\nprint(\"You are using the free version of the app. Buy the full version of the app to get access to all of its features.\")\n}\nlet morningTemperature = 70\nlet eveningTemperature = 80\nif morningTemperature &lt; eveningTemperature {\nprint(\"Morning temperature is \\(morningTemperature).\")\n}\nelse {\nprint(\"Evening temperature is \\(eveningTemperature).\")\n}\nlet temperatureDegree = \"Fahrenheit\"\nif temperatureDegree == \"Fahrenheit\" {\nprint(\"App uses \\(temperatureDegree) degrees.\")\n}\nelse {\nprint(\"App uses Celsius degrees.\")\n}\nif temperatureDegree == \"Fahrenheit\" || temperatureDegree == \"Celsius\" {\nprint(\"App is configured properly.\")\n}\nelse {\nprint(\"App isn\u2019t configured properly.\")\n}\nswitch temperatureDegree {\ncase \"Fahrenheit\":\nprint(\"App is configured for the US.\")\ncase \"Celsius\":\nprint(\"App is configured for Europe.\")\ndefault:\nprint(\"App has an unknown configuration.\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Conditions/#additional-resources","title":"Additional resources","text":"<p>Refer to the Control Flow chapter from the Swift Programming Language Guide to further your understanding of conditional statements.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/","title":"Loops","text":"<pre><code>for val in 1...5 {\nprint(val)\n}\n/*\n1\n2\n3\n4\n5\n*/\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#examples-of-loops-in-swift","title":"Examples of loops in Swift","text":"<p>Earlier you learned that loops are statements that repeat a block of code a number of times while a certain condition is true. The number of iterations is either well known before the loop is executed, or determined during its execution based on a certain condition. You also discovered that the loop gets executed as long as its condition is true. In this reading, you will explore examples of loops. You will reflect on what they are, why they are used, and most importantly, explore how to use them in your code.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#types-of-loops","title":"Types of loops","text":"<p>You learned that there are different types of loops:</p> <ol> <li>For in loops execute a block of code a given number of times. This type of loop is useful when you know the number of iterations beforehand.</li> <li>While and repeat while loops execute a block of code while a certain condition is true.</li> </ol> <p>Tip: Any for in loop can be converted to a while or repeat while loop, but not the other way round.</p> <p>You will explore the types of loops with relevant examples next.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#a-look-at-loops-in-practice","title":"A look at loops in practice","text":"<p>To begin, let\u2019s start by exploring for in loops since they are simpler to implement than while and repeat while loops.</p> <p>Suppose you are creating a dice game where the game logic uses a for in loop to implement dice rolls. You may create a for in loop that iterates over a range.</p> <pre><code>for dice in 1...6 {\nprint(\"Roll a \\(dice).\")\n}\n</code></pre> <p>The for in loop uses a closed range to roll all of the dice numbers in a row. It repeats itself six times and prints a different number between 1 and 6 each time.</p> <p>Where the objective of the game is to roll doubles, you can use a while loop to implement that.</p> <pre><code>var firstDice = Int.random(in: 1...6)\nvar secondDice = Int.random(in: 1...6)\nwhile firstDice != secondDice {\nfirstDice = Int.random(in: 1...6)\nsecondDice = Int.random(in: 1...6)\n}\nprint(\"You rolled a double \\(firstDice).\")\n</code></pre> <p>The random(in:) method generates a random number between the lower bound and upper bound of a certain range of integers. You call the method as Int.random(in:) in your code because you have to specify the data type the method works with, which is Int in this case. You first use the random(in:) method of the Int type to generate random numbers between 1 and 6 for the firstDice and secondDice variables. The while loop then checks if the previously generated numbers are different and generates new random numbers for both variables until their values are equal. The code that rolls the dice is repeated twice in this case: once before the while loop and once inside the loop itself. This happens because the while loop first checks if its condition is true and only then performs any iteration. You can fix this by implementing the game logic with a repeat while loop instead.</p> <pre><code>var firstDice = 0\nvar secondDice = 0\nrepeat {\nfirstDice = Int.random(in: 1...6)\nsecondDice = Int.random(in: 1...6)\n} while firstDice != secondDice\nprint(\"You rolled a double \\(firstDice).\")\n</code></pre> <p>You first set the firstDice and secondDice variables to 0 this time. The repeat while loop then generates random dice values as before until they become equal. Its condition is evaluated only after the first iteration since the dice are rolled only inside the loop this time.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#concluding-thoughts","title":"Concluding thoughts","text":"<p>Loops repeat things for a number of times while a certain condition is true. For in loops know their number of iterations before they are executed, whereas while and repeat while loops are executed as long as their conditions are true.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#exercise-using-conditions-and-loops","title":"Exercise: Using conditions and loops","text":"<p>In this exercise, you will have the opportunity to explore how different programming concepts come together. You will be prompted to apply what you have learned to create for in loops, if conditions and break and continue statements. After completing this exercise, you will have created your very first for in loop that uses conditional statements to implement simple game logic for a multi-level game.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#scenario","title":"Scenario","text":"<p>Imagine you are creating a game that consists of free, paid and bonus levels. You will use both for in loops and if statements to implement the game logic while considering the relationship between the free, paid and bonus levels of the game.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#instructions","title":"Instructions","text":"<p>To begin this exercise, create a new playground in Xcode. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own game loop with multiple levels.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-1-create-constants","title":"Step 1: Create constants","text":"<p>Create constants for the different types of levels for this exercise.</p> <ol> <li>First, declare a constant for the total levels of the game. For example, set levels equal to 10.</li> <li>Next, create a constant for the free levels. You may call it freeLevels. Set its initial value to 4 since the first 4 levels are free to play.</li> <li>Finally, create a constant for the bonus level. Call it bonusLevel and set its initial value to 3.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-2-create-a-for-in-loop","title":"Step 2: Create a for in loop","text":"<p>Declare the for in loop to implement the main game logic. The loop should use a closed range to go through all the levels of the game.</p> <p>You should now have a loop that iterates over the \"1...levels\" range.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-3-create-an-if-statement-to-assess-if-current-level-is-a-bonus-level","title":"Step 3: Create an if statement to assess if current level is a bonus level","text":"<ol> <li>Add an if statement to the for in loop to check if the current level of the game is a bonus level.</li> <li>Use the print statement to print the current level inside the if statement if it's a bonus level. You can add any custom description to the print statement, for example: \u201cSkip bonus level\u2026\u201d. This will output the description with a value to the console.</li> <li>Use the continue statement inside the condition itself to skip the current level if it\u2019s a bonus level and automatically advance to the next level instead.</li> </ol> <p>Tip: Remember to use backslash with the bonusLevel constant in parentheses in your print statement. This is called \"string interpolation\".</p> <p>You should now have an if statement inside a for in loop that uses the equals operator to determine if the current level is equal to the bonus level.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-4-print-the-current-level","title":"Step 4: Print the current level","text":"<p>Print \"Play level...\" with the current level number to the console.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-5-create-an-if-statement-to-assess-if-current-level-is-free","title":"Step 5: Create an if statement to assess if current level is free","text":"<ol> <li>Add another if statement to the for in loop to check if the current level of the game is a free level.</li> <li>Use the print statement inside the if statement to print the number of free levels and paid levels if all free levels have already been played.</li> <li>Use the break statement inside the condition itself to finish the game if all of the free levels have been played.</li> </ol> <p>This ensures that players only play the free version of the game. Players have to buy the full version of the game in order to be able to play it entirely.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#step-6-run-your-code","title":"Step 6: Run your code","text":"<p>Run your program and note down the output. The first line of the output should be \u201cPlay level 1.\u201d.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#tips","title":"Tips","text":"<ul> <li>Implement a for in loop to handle the game logic itself.</li> <li>Use the break statement to make only the free versions playable.</li> <li>Use the continue statement to skip any bonus levels of the game.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Loops/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you used loops, conditions and control flow transfer statements like break and continue to implement game logic for a simple game with multiple levels.</p> <pre><code>let levels = 10\nlet freeLevels = 4\nlet bonusLevel = 3\nfor current_level in 1...levels {\nif current_level == bonusLevel {\nprint(\"Skip bonus level \\(bonusLevel).\")\ncontinue\n}\nif current_level == freeLevels {\n// print(\"Number of free levels: \\(freeLevels)\")\n// print(\"Number of free levels: \\(levels - freeLevels)\")\nprint(\"You have played all \\(freeLevels) free levels. Buy the game to play the remaining \\(levels - freeLevels) levels.\")\nbreak\n}\nprint(\"Play level \\(current_level).\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/","title":"Optional","text":"Info <p>Optionals help developers like you make your code safer and more expressive by signaling to Swift that the value of a variable may be absent.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#unwrapping","title":"UnWrapping","text":"<pre><code>// Optional\nvar num: Int?\nprint(num)\n// nil\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#forced-unwrapping","title":"Forced UnWrapping","text":"<pre><code>// Optional\nvar num: Int?\nvar age: Int! = num\nprint(num)\nprint(age)\n// nil\n// nil\n</code></pre> <ul> <li>Developers mainly use this when they need to communicate to things in IOS the implicitly Unwrapped optional acts as something called a promise.</li> </ul> <pre><code>var num: Int? = 1\nvar age: Int! = 2\nprint(num)\nprint(age)\n// Optional(1)\n// Optional(2)\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#exercise-work-with-optionals-in-swift","title":"Exercise: Work with optionals in Swift","text":"<p>So far you\u2019ve learned that optionals signal that the value or reference to an object may be absent. You also learned that optionals return a special literal called \u201cnil\u201d in such cases. In this activity, you will practice using forced unwrapping and optional binding to work with optional values.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#scenario","title":"Scenario","text":"<p>Suppose you are creating an app that requires a password and a passcode for users to sign in. To achieve this, you will use optionals, the forced unwrapping operator, and simple and multiple optional bindings to generate passcodes from passwords and check if the generated passcodes are valid.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode. Once you have created a new playground, follow the steps below to create your very own password and passcode generator.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#tips","title":"Tips","text":"<ul> <li>Use forced unwrapping to unwrap optionals that always have valid values.</li> <li>Use optional binding to unwrap optionals that can be \u201cnil\u201d.</li> <li>Use multiple optional bindings in the same if let statement if needed.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-1-create-a-variable-password","title":"Step 1: Create a variable password","text":"<p>Create a variable that stores the generated password. Call it password and assign a string value of \"1234\". You now have a password that currently only contains digits.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-2-create-a-constant-passcode","title":"Step 2: Create a constant passcode","text":"<p>Create a constant for the generated passcode and name it passcode. Cast the password string to an integer value and store the result in the passcode constant.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-3-print-the-passcode","title":"Step 3: Print the passcode","text":"<p>Use the print statement to print the passcode to the console. The passcode is an optional value so use the forced unwrapping operator to access its value. This works because the passcode isn\u2019t nil in this case, since it was converted into an integer in the previous step.</p> Tip <p>To force unwrap an optional, you will add an exclamation mark (!) at the end of your optional.</p> <p>At times the passcode value might be nil, for instance when the value holds letters. You will explore what to do in such scenarios next.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-4-check-if-the-passcode-is-valid","title":"Step 4: Check if the passcode is valid","text":"<p>Now use optional binding to check if the passcode is valid in case it is nil. To achieve this, you will use an if let statement to evaluate whether the passcode constant is valid, or nil.</p> <ul> <li>First, change the value of the password variable to \"hello world\". This means that you will now have a password that only contains letters.</li> <li>Then use an if let statement to safely unwrap the converted integer value of the password string. Create a binding constant, call it code and assign the result of the password to passcode conversion to it.</li> <li>Tip: The if let statement creates a binding constant. This constant will only be used inside the if let block. The binding constant stores the optional\u2019s unwrapped value in case it\u2019s not nil.</li> <li>Print the passcode\u2019s value to the console inside the if let block if the passcode is valid.</li> <li>Print the error message \"Invalid passcode!\" to the console inside the else block if the passcode is invalid.</li> </ul> <p>Run your code and review the output in the console.</p> <p>Notice that because the value was changed from an integer to a string, the error message defined in the else block is displayed in the console. However, if you were to change the password from a string back to an integer, the statement defined in the if block will be outputted to the console instead.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-5-set-a-default-passcode","title":"Step 5: Set a default passcode","text":"<p>Next, use optional binding to set a default passcode if the generated passcode isn\u2019t valid.</p> <ol> <li>First, create an integer constant and call it accessCode. Set its type to Int since you don\u2019t know its value yet. (In scenarios like this, you can\u2019t rely on type inference to specify the type for you.)</li> <li>Then use an if let statement to safely unwrap the converted integer value of the password string as before. Create a binding constant, call it code and assign the result of the password to passcode conversion to it.</li> <li>Set the value of the accessCode constant to the value of the code constant inside the if let block since the passcode is valid in this case.</li> <li>Set the value of the accessCode constant to 1111 inside the else block since the passcode is not valid in this case. This is the default passcode.</li> <li>Print the passcode to the console.</li> </ol> <p>Run your code and review the output. Notice that Int(password) generates an integer from the password which is a string. It either returns a valid integer if the password contains only digits or nil if the password contains at least one character that isn't a digit. It then assigns the result to the passcode. Since the password was previously changed to \"hello world\", the else block is executed and sets the default to 1111.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-6-implement-two-factor-authentication-with-passcodes","title":"Step 6: Implement two-factor authentication with passcodes","text":"<p>Now use multiple optional bindings in the same if let statement to implement two-factor authentication with passcodes. Two-factor authentication is the process of verifying a login request and granting access based on two different sets of credentials, which increases the security of the app.</p> <ol> <li>First create constants for the two passwords. Call the first constant firstPassword and set its value to \"hello\". Name the second constant secondPassword and set its value to \"world\". Both passwords contain only letters in this case.</li> <li>Then use an if let statement to safely unwrap the converted integer values of the string passwords. Create binding constants for the two passcodes separated by a comma.<ol> <li>Call the first constant firstPasscode and assign the result of the first password to first passcode conversion to it.</li> <li>Name the second constant secondPasscode and assign the result of the second password to second passcode conversion to it.</li> </ol> </li> <li>Print the values of the passcodes to the console inside the if let block if both passcodes are valid.</li> <li>Print an error message to the console inside the else block if at least one passcode isn\u2019t valid.</li> </ol> <p>Run your code and review the output in the console.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#step-7-set-default-passcodes-for-two-factor-authentication","title":"Step 7: Set default passcodes for two-factor authentication","text":"<p>Next use optional binding to set default passcodes in case something goes wrong during the two-factor authentication.</p> <ol> <li>First create two integer constants for the default passcodes. Call the first one firstAccessCode and name the second one secondAccessCode. Set their types to Int since you don\u2019t know their values yet.</li> <li>Then use an if let statement to safely unwrap the converted integer values of the string passwords as before. Create binding constants for the two passcodes separated by a comma.<ol> <li>Call the first constant firstPasscode and assign the result of the first password to first passcode conversion to it.</li> <li>Name the second constant secondPasscode and assign the result of the second password to the second passcode conversion to it.</li> </ol> </li> <li>Set the value of the firstAccessCode constant to the value of the firstPasscode constant and the value of the secondAccessCode constant to the value of the secondPasscode constant inside the if let block since both passcodes are valid in this case.</li> <li>Set the value of the firstAccessCode constant to 1111 and the value of the secondAccessCode constant to 2222 inside the else block if at least one passcode isn\u2019t valid. These are the default passcodes.</li> <li>Print both passcodes to the console and run your program.</li> </ol> <p>Run your program and review the output to the console. Compare your code with the snippet below.</p> <p>The image above provides the output for steps 7 and 8 only. You will have the opportunity to review the solution code for the entire exercise in the following reading.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise you used the forced unwrapping operator, simple and multiple optional bindings to unwrap optionals safely and create a password and passcode generator with two-factor authentication.</p> <pre><code>var password = \"1234\"\nlet passcode = Int(password)\nprint(\"The passcode of the app is \\(passcode!).\")\npassword = \"hello world\"\nif let code = Int(password) {\n// code is not nil\nprint(\"The passcode is \\(code).\")\n} else {\n// code is nil\nprint(\"Invalid passcode!\")\n}\nlet accessCode: Int\nif let code = Int(password) {\naccessCode = code\n} else {\naccessCode = 1111\n}\nprint(\"The passcode of the app is \\(accessCode).\")\n// ------------------------------------------------\nlet firstPassword = \"hello\"\nlet secondPassword = \"world\"\nif let firstPasscode = Int(firstPassword), let secondPasscode = Int(secondPassword) {\nprint(\"First Passcode is \\(firstPasscode) &amp; Second Passcode is \\(secondPasscode).\")\n} else {\nprint(\"Invalid passcode!\")\n}\nlet firstAccessCode: Int\nlet secondAccessCode: Int\nif let firstPasscode = Int(firstPassword), let secondPasscode = Int(secondPassword) {\nfirstAccessCode = firstPasscode\nsecondAccessCode = secondPasscode\n} else {\nfirstAccessCode = 1111\nsecondAccessCode = 2222\n}\nprint(\"The first passcode is \\(firstAccessCode), and second passcode is \\(secondAccessCode).\")\n</code></pre> <p>The if let statement is used in optional binding.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week1-Optionals/#additional-resources","title":"Additional resources","text":"<p>The following resource from the Swift Programming Language Guide may be helpful as you continue your learning journey:</p> <ul> <li>Swift Basics</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/","title":"Arrays &amp; Tuples","text":"<p>you can create an array of integers, floats, or strings, but you cannot mix them.</p> <pre><code>var colors: [String] = [\"red\", \"yellow\", \"blue\"]\nvar numbers = [10, 34, 5]\ncolors[1] = \"green\"\nprint(colors)\n// [\"red\", \"green\", \"blue\"]\nprint(colors.count)\n// 3\ncolors.append(\"black\")\nprint(colors)\n// [\"red\", \"green\", \"blue\", \"black\"]\ncolors.insert(\"white\", at: 2)\nprint(colors)\n//[\"red\", \"green\", \"white\", \"blue\", \"black\"]\ncolors.remove(at: 2)\nprint(colors)\n// [\"red\", \"green\", \"blue\", \"black\"]\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#exercise-arrays-in-swift","title":"Exercise: Arrays in Swift","text":"<p>In this exercise, you will practice using arrays to store information. You will also practice using the count property to determine the number of elements in an array. You will use the append method to add values to an existing array and use the addition assignment operator to add arrays together.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#scenario","title":"Scenario","text":"<p>Suppose you are creating a very basic game with multiple levels. The first three levels are free, while players need to pay to access the remaining levels. The game dashboard displays the player's score for each individual level. In this exercise, you will use arrays to store the scores of the levels while the game is played.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode. Once you have created a new playground, follow the steps below to create your very own game with multiple levels.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#tips","title":"Tips","text":"<ul> <li>Use the count property to determine the number of elements in an array.</li> <li>Use the append method to add a certain value to an array.</li> <li>Use the addition assignment operator to add an array to another array.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-1-create-an-empty-array","title":"Step 1: Create an empty array","text":"<ol> <li>Create a variable to store the scores of the game levels. Call it levelScores.</li> <li>Since the game hasn\u2019t been played yet and there are no score values to store, set its value to []. This indicates that the array is currently empty.</li> <li>Set the variable\u2019s type to [Int]. You have to specify the type since the level scores are integers and type inference doesn\u2019t work with empty arrays.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-2-use-the-count-property-to-determine-if-the-game-has-started","title":"Step 2: Use the count property to determine if the game has started","text":"<p>Suppose you want to welcome new players to the game if it\u2019s their first time playing. You will create a print statement to display a message in the console if the game hasn\u2019t been attempted yet.</p> <p>To achieve this, create an if statement to check if the array is empty, then add a print statement with your welcome message.</p> <ol> <li>Use the count property to create an if statement that compares the number of elements in the levelScores array (using the count property) with 0. The count property counts the number of elements in the array and the if statement checks if they are equal to 0.</li> <li>Next, print a welcome message of your choice to the console inside the if block if there are no levels in the level scores array yet.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-3-add-the-first-levels-score","title":"Step 3: Add the first level\u2019s score","text":"<p>Now that players have been welcomed and are playing the game, you will start tracking the scores in the levelScores array. Suppose players completed the first level with a score of 10 and also received a bonus score of 40.</p> <p>For this step, start by adding the first level\u2019s score to the array. Don't worry about the bonus right now.</p> <ol> <li>Create a constant that stores the first level\u2019s score. Name it firstLevelScore and set its value to 10.</li> <li>Use the append() method of the levelScores array to add the value of the firstLevelScore constant to the levelScore variable. This adds the first level\u2019s score to the level scores array.</li> <li>Print the first level's score to the console by referencing its index number in the levelScores array.</li> </ol> <p>Tip</p> <p>Since arrays use zero-based indexing to access their elements, the index of the first element of the levelScores array is 0. You will need to use this index number to print the first level\u2019s score to the console. Run your code and review the output. You should now have a line in the console that reads: \u201cThe first level's score is 10.\u201d</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-4-add-the-bonus-score-to-the-first-levels-score","title":"Step 4: Add the bonus score to the first level\u2019s score","text":"<p>Next, add the bonus score to the first level\u2019s score in the levelScores array.</p> <ol> <li>Create a constant that stores the bonus score. Name it levelBonusScore and set its value to 40.</li> <li>Use the addition assignment operator to add the value of the levelBonusScore constant to the value of the first level\u2019s score in the levelScores array. Note: You are adding the bonus score to the first level's score. which is already in the levelScores array.</li> <li>Print the updated value of the first level\u2019s score to the console.</li> </ol> <p>Run your code and review the output. The value should now reflect a score of 50.</p> <p>Note</p> <p>The above code works because the levelScores array is defined as a variable. If you declared it as a constant instead you would then get the following error when running the code: \"Left side of mutating operator isn\u2019t mutable: \u2018levelScores\u2019 is a \u2018let\u2019 constant\". This means that you can\u2019t modify the scores of the levels in the levelScores array because the levelScores array is defined as a constant.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-5-add-more-values-to-the-array","title":"Step 5: Add more values to the array","text":"<p>You can add more than one score to the levelScores array in one go. To demonstrate this, you will create a new array to store all the scores of the free levels. You will then add the array to the existing levelScores array.</p> <p>Note: The first three levels are free.</p> <ol> <li>Create a constant that stores the scores of the other free levels inside a new array. Name it freeLevelScores and set its value to [20, 30]. Note: The values of the array are separated by commas.</li> <li>Use the addition assignment operator to add the freeLevelScores array to the levelScores array. This updates the levelScores array with the scores of the other free levels that have been played.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-6-check-if-free-version-of-the-game-has-been-played","title":"Step 6: Check if free version of the game has been played","text":"<p>Finally, check if all the free levels of the game have been played.</p> <ol> <li>Create a constant that stores the number of free levels. Call it freeLevels and set its value to 3.</li> <li>Use an if statement with the \"equals to\" operator to compare the number of levels stored by the count property of the levelScores array with the value of the freeLevels constant. This checks if all the free levels of the game have been played.</li> <li>Print the following message to the console inside the if block if all the free levels have been played: \"You have to buy the game in order to play its full version.\"</li> <li>Next, assign an empty array to the levelScores array inside the if block. This means that you are restarting the free version of the game.</li> <li>Include a print statement inside the if block that prints the message \u201cGame restarted!\u201d to the console after the game has been restarted.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-7-run-your-code","title":"Step 7: Run your code","text":"<p>Run your program and note down the output.\u00a0 The first printed statement should be your welcome message, for example: \"Start playing the game!\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you used arrays to implement the game logic of a very simple game with multiple levels. You practiced different approaches to adding elements to an array, and also explored how to use the array\u2019s index value to print to the console if a certain condition is true.</p> <pre><code>var levelScore: [Int] = []\nif levelScore.count == 0 {\nprint(\"Start playing the game!\")\n}\nlet firstLevelScore = 10\nlevelScore.append(firstLevelScore)\nprint(\"First level's score is \\(levelScore[0]).\")\nlet levelBonusScore = 40\nlevelScore[0] += levelBonusScore\nprint(\"First level's score is \\(levelScore[0]).\")\nlet freeLevelScores = [20, 30]\nlevelScore += freeLevelScores\nprint(\"Your score is \\(levelScore)\")\n// [50, 20, 30]\nlet freeLevels = 3\nif levelScore.count == freeLevels {\nprint(\"You have to buy the game in order to play its full version.\")\nlevelScore = []\nprint(\"Game restarted!\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#tuples","title":"Tuples","text":"<pre><code>var vegtables = (\"Carrot\", 3, true)\n// Access to tuple's elements\nvar (vegName, quantity, inStock) = vegtables\nprint(quantity)\n// 3\nvar veg = (vegtableName: \"Carrot\", quantity: 3, inStock: true)\nprint(veg.vegtableName)\n// Carrot\nprint(vegtables.2)\n// true\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#exercise-tuples","title":"Exercise: Tuples","text":"<p>You've learned that tuples are used to store multiple values of different data types. You also explored how developers use tuples when they want to assign a variable with multiple values or return multiple values from a function. In this exercise, you will have the opportunity to apply what you've learned to create and use tuples to store multiple values of different types.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#scenario_1","title":"Scenario","text":"<p>For this activity, suppose you are creating a basic login feature for a banking app. You will use tuples to store the credentials for logging into the banking app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#instructions_1","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own login feature.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#tips_1","title":"Tips","text":"<ul> <li>Tuples can store elements of different types.</li> <li>Tuples use zero-based indexing to access their elements by default.</li> <li>Tuples may have custom labels that identify their elements.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-1-store-the-app-credentials","title":"Step 1: Store the app credentials","text":"<ol> <li>First create a constant that stores the credentials of the banking app. Call it credentials and set its value to a tuple that contains the password and passcode for logging into the app. Set the password\u2019s value to an empty string and the passcode\u2019s value to -1111.</li> </ol> <p>You set an empty string as the password\u2019s value by assigning <code>\"\"</code> to the tuple\u2019s password credential.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-2-evaluate-credentials","title":"Step 2: Evaluate credentials","text":"<p>Next, check if the previously created credentials are valid.</p> <ol> <li> <p>Use an if else statement with the OR operator to test the values of the password and passcode.</p> <p>Take note: The password shouldn\u2019t be an empty string and the passcode should be a positive number. The credentials tuple uses zero-based indexing to access its password and passcode which are separated by a comma inside the tuple.</p> </li> <li> <p>Inside the if block, print the status of the app\u2019s credentials to the console. Your print statement should read: \u201cInvalid credentials!\u201d. This means that if one of the credentials isn\u2019t valid, the user can\u2019t log in to the banking app.</p> </li> <li>Inside the else block, print the password and passcode to the console to indicate that the credentials are valid. Your print statement may read: \"The username is\u2026 and the passcode is\u2026\"</li> </ol> <p>Remember that zero-based indexing means that the index of the tuple\u2019s first element is 0 rather than 1. Review the arrays exercise if you aren\u2019t sure how this feature works exactly.</p> <p>Run your code and review the output in the console. The print statement in the if block should display since the credentials are currently invalid.</p> <p>Notice that it isn\u2019t clear what the credentials tuple\u2019s elements represent exactly. You will fix this in the next step of the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-3-store-the-apps-full-credentials","title":"Step 3: Store the app\u2019s full credentials","text":"<ol> <li>Create a constant that stores the full credentials of the banking app. Call it fullCredentials and set its value to a tuple that contains the password and passcode for logging into the app.</li> <li>Set the password\u2019s value to \"pass\" and the passcode\u2019s value to 1111. The fullCredentials tuple\u2019s elements have labels that identify them properly: a password label for the app\u2019s password and a passcode label for the app\u2019s passcode.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#step-4-revaluate-credentials","title":"Step 4: Revaluate credentials","text":"<p>Finally, check if the full credentials are valid.</p> <ol> <li>Use an if else statement with the OR operator to test the values of the password and passcode. Take note: The password shouldn\u2019t be an empty string and the passcode should be a positive number. Use the password and passcode properties of the fullCredentials tuple to access the values of the app\u2019s password and passcode.</li> <li>Print the status of the app\u2019s credentials to the console inside the if block. Your print statement should indicate that if at least one of the credentials isn\u2019t valid, the user can\u2019t log in to the banking app.</li> <li>Print the password and passcode to the console inside the else block. Your print statement should indicate that since both credentials are valid, the user may successfully log in to the banking.</li> </ol> <p>Run your code and review the output in the console. The else block\u2019s print statement should display in the console.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Arrays-Tuples/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you practiced creating tuples while exploring how to use zero-based indexing and labels to compare values.</p> <pre><code>let credentials = (\"\", -1111)\nif credentials.0 == \"\" || credentials.1 &lt; 0 {\nprint(\"Invalid credentials!\")\n}\nelse {\nprint(\"The password is \\(credentials.0) and the passcode is \\(credentials.1)\")\n}\nlet fullCredentials = (password: \"pass\", passcode: 1111)\nif fullCredentials.password == \"\" || fullCredentials.passcode &lt; 0 {\nprint(\"Invalid credentials!\")\n}\nelse {\nprint(\"The password is \\(fullCredentials.password) and the passcode is \\(fullCredentials.passcode).\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/","title":"Collections <code>Dictionaries</code>","text":"exampleDictionaries.swift<pre><code>var travelMiles: Dictionary&lt;String, Int&gt; = [\"Richie\": 500, \"Peter\": 400, \"Deamon\": 100]\nvar emptyDict = Dictionary&lt;String, String&gt;()\nprint(travelMiles)\nprint(emptyDict)\nif let traveller = travelMiles[\"Richie\"] {\nprint(traveller)\n// Because key exists\n// 500\n}\nif let traveller = travelMiles[\"Scarlett\"] {\nprint(traveller)\n// Key doesn't exist\n} else {\nprint(\"Key doesn't exist! return 'nil'\")\n// Key doesn't exist! return 'nil'\n}\ntravelMiles[\"Peter\"] = 500\nprint(travelMiles)\n// [\"Richie\": 500, \"Peter\": 500]\nif let oldvalue = travelMiles.updateValue(300, forKey: \"Peter\") {\nprint(\"The old value for Peter was \\(oldvalue)\")\n}\nprint(travelMiles)\n// [\"Richie\": 500, \"Peter\": 300]\n// Remove an Item\n// No. 1\nif let deletedItem = travelMiles.removeValue(forKey: \"Richie\") {\nprint(\"Item deleted: \\(deletedItem).\")\n}\n// No. 2\ntravelMiles[\"Richie\"] = nil\nprint(travelMiles)\n// [\"Peter\": 300, \"Deamon\": 100]\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#exercise-dictionaries-in-swift","title":"Exercise: Dictionaries in Swift","text":"<p>So far you\u2019ve learned that dictionaries allow you to store key-value pairs. In this activity, you will have the opportunity to apply what you\u2019ve learned to use dictionaries in a fictional weather app. You will also be prompted to apply programming concepts that you have learned about previously. This will allow you to have a first-hand experience of how dictionaries may be used in practice together with other Swift programming basics.</p> <p>After completing this exercise, you will be able to create and use dictionaries to store specific keys and values. You will also be able to use forced unwrapping and optional binding to modify the values within a dictionary.</p> <p>If you\u2019d like to refresh your memory on what these concepts entail, please revisit the lesson on optionals.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#scenario","title":"Scenario","text":"<p>Weather apps are handy tools that allow users to review the weather forecast for a specific timeline. For this activity, you will use dictionaries to store the daily temperatures of a specific week.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own weather app.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#tips","title":"Tips","text":"<ul> <li>Use the count property to determine the number of elements in a dictionary.</li> <li>Use forced unwrapping to access dictionary elements with valid keys.</li> <li>Use optional binding to check if a certain element exists in the dictionary.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-1-create-a-dictionary","title":"Step 1: Create a dictionary","text":"<p>To start this exercise, you will begin by creating an empty dictionary.</p> <ol> <li>First, create a variable that stores the daily temperatures of the current week. Call it weeklyTemperatures and set its value to [:] to indicate that it\u2019s an empty dictionary.</li> <li>Set the variable\u2019s type to [String: Int]. The dictionary\u2019s keys are strings that will store the name of the day, while the values are integers that will store the daily temperature of a given day.</li> </ol> <p>Note: You set the dictionary\u2019s type explicitly because type inference doesn\u2019t work with empty dictionaries.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-2-set-the-daily-temperatures-in-the-dictionary","title":"Step 2: Set the daily temperatures in the dictionary","text":"<p>Update the weeklyTemperatures variable\u2019s value to: [\"Monday\": 70, \"Tuesday\": 75, \"Wednesday\": 80, \"Thursday\": 85, \"Friday\": 90, \"Saturday\": 95]</p> <p>Note: Each key is separated by its value with a colon. The pairs of keys and values are separated by commas.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-31-update-the-first-days-temperature","title":"Step 3.1: Update the first day\u2019s temperature","text":"<p>Next, you will change the temperature value of the first day in the weekly temperatures dictionary.</p> <p>Use the addition assignment operator and the forced unwrapping operator to add a certain value to the daily temperature for the first day of the week.</p> <p>Tip: Since the temperature\u2019s value is an optional, you first have to unwrap it before you can use its value properly. The first day of the week\u2019s temperature is already in the weekly temperatures dictionary. This means that you can access its value with the forced unwrapping operator. Use the first key in the weeklyTemperatures dictionary to retrieve the temperature value of the first day; namely \"Monday\".</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-32-evaluate-the-changed-value","title":"Step 3.2: Evaluate the changed value","text":"<p>Then, to evaluate that you have successfully retrieved and changed the value, print the daily temperature for the first day of the week to the console.</p> <p>Run your code and review the output. Depending on the value you changed it to, the updated temperature for the given day should display in the console.</p> <p>For example, if you added 20 to the initial value, the output to the console should be: \"The temperature on Monday is 90\u00b0F.\"</p> <p>The print statement retrieves the temperature value from the weekly temperatures dictionary using the first key in the dictionary. The forced unwrapping operator safely unwraps the temperature\u2019s value before printing it out.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-4-add-a-new-key-value-pair","title":"Step 4: Add a new key-value pair","text":"<p>For the purpose of this exercise, you will use optional binding to evaluate if the dictionary contains the key and value for the last day of the week, namely \"Sunday\". More specifically, you will use the else block of the if let statement to define the key-value pair for the last day of the week in the weeklyTemperature dictionary.</p> <ol> <li>Use an if let statement with optional binding to check if Sunday is already stored in the weeklyTemperature dictionary.<ol> <li>Create a binding constant, call it temperature and assign the unwrapped value of the last day of the week to it.</li> </ol> </li> <li>Next, include a print statement inside the if block that prints the key and the value to the console. This means that if the value already exists in the dictionary, the print statement will be executed.</li> <li>Then in the else block, set Sunday's temperature to 100. This means that if the key, the associated value, or both don't already exist in the dictionary, the else block will add it.</li> <li>Finally, print the daily temperature for the last day of the week to the console inside the else block. Use the forced unwrapping operator to retrieve the last day of the week\u2019s temperature from the weekly temperatures dictionary since the last day of the week\u2019s temperature now exists in the weekly temperatures dictionary.</li> </ol> <p>Run your program and review the output to the console. You should now have a new printed line that reflects the temperature value on Sunday.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-5-reset-the-dictionary-for-a-new-week","title":"Step 5: Reset the dictionary for a new week","text":"<p>To conclude this exercise, you will now prepare the weekly temperatures dictionary for the next week\u2019s weather forecast for when the current week ends.</p> <ol> <li>Use an if statement with the count property of the weeklyTemperatures dictionary to check if the weekly temperatures dictionary already contains all the daily temperatures for all the days of the week.</li> <li>Print the weather forecast\u2019s status for the whole week inside the if block.</li> <li>Assign an empty dictionary to the weeklyTemperatures dictionary inside the if block. This means that you are preparing the weekly temperatures dictionary for next week\u2019s weather forecast now that the weather forecast of the current week is ending.</li> <li>Print the weather forecast\u2019s status for the next week inside the if block.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-6-run-your-code","title":"Step 6: Run your code","text":"<p>Run your program and note down the output.</p> <p>The first printed statement should be: \"The temperature on Monday is 90\u00b0F.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you created a dictionary with several key-value pairs. You then went on to use forced unwrapping to access dictionary elements with valid keys. Thereafter, you used optional binding to check if an element exists in the dictionary and then you moved on to use the count property to determine the number of elements in the dictionary.</p> <p>By completing this exercise, you have demonstrated your ability to use dictionaries in hand with other programming concepts to configure a weather app. Well done!</p> Note <p>If you got stuck along the way, don\u2019t worry! You have come a long way on your learning journey and practicing takes time, grit and patience. And since you\u2019ve come this far, you likely already possess those characteristics.</p> <p>Take a break to enjoy your favorite beverage, then refer to the solution code in the following reading and try again. You might just be surprised by what you learn after completing the exercise again.</p> <pre><code>//var weeklyTemperatures = Dictionary&lt;String, Int&gt;()\nvar weeklyTemperatures: [String: Int] = [:]\nprint(weeklyTemperatures)\nweeklyTemperatures = [\"Monday\": 70, \"Tuesday\": 75, \"Wednesday\": 80, \"Thursday\": 85, \"Friday\": 90, \"Saturday\": 95]\nprint(weeklyTemperatures)\nweeklyTemperatures[\"Monday\"]! += 20\nprint(weeklyTemperatures)\nprint(\"The temperature on Monday is \\(weeklyTemperatures[\"Monday\"]!)\u00baF\")\nif let temperature = weeklyTemperatures[\"Sunday\"] {\nprint(\"The temperature on Sunday was \\(temperature)\u00baF.\")\n}\nelse {\nweeklyTemperatures[\"Sunday\"] = 100\n}\nprint(\"The temperature on Sunday was \\(weeklyTemperatures[\"Sunday\"]!)\u00baF.\")\nif weeklyTemperatures.count == 7 {\nprint(\"Week complete!\")\nweeklyTemperatures = [:]\nprint(\"Weather forecast\u2019s status for the next week: \\(weeklyTemperatures).\")\n}\n</code></pre> <p>When accessing a key's associated value in a dictionary by force unwrapping, your program will terminate code execution if the key's associated value isn't present.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#for-loop-in-dictionaries","title":"For loop in dictionaries","text":"<pre><code>var vehicles = [\"unicycle\": 1, \"bike\": 2]\nfor (vehName, vehWheel) in vehicles {\nprint(\"A \\(vehName) has \\(vehWheel) wheel(s).\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#exercise-using-loops-with-collection-types","title":"Exercise: Using loops with collection types","text":"<p>So far you\u2019ve learned that developers use loops to continually execute repeated blocks of code while a certain condition is satisfied. You have also learned that data structures like arrays, tuples and dictionaries allow you to store a collection of values. In this exercise, you will practice using loops with these collection types.</p> <p>After completing this exercise, you will be able to use for in loops to loop over arrays, tuples and dictionaries. If you need a refresher on how to use loops in your code, please refer to the lesson on loops.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#scenario_1","title":"Scenario","text":"<p>In this exercise, you will practice iterating through arrays and dictionaries. Also, you will learn to incorporate tuples in your for loops.</p> <p>You will iterate through game levels and increase the game score at each level. Furthermore, you will report the weather forecast for each day of the week.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#instructions_1","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to implement the logic for a multi-level game that also uses a weather widget.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-1-display-individual-game-level-scores","title":"Step 1: Display individual game level scores","text":"<p>For the first step in this exercise, you will create an array to store the score the player achieved for each game level. You will then use a for in loop and the enumerated() method to print each level with its respective score to the console.</p> <ol> <li>Start by creating a constant for the level scores array. Name it levelScores and set its value to [10, 20, 30, 40, 50, 60, 70].</li> <li>Use a for in loop with the enumerated() method applied on levelScores. The enumerated() method returns a tuple of the iteration's index and value in levelScores. Tip: Include the keyword for followed by (level, score). This creates a tuple. Then insert the keyword in followed by the array name appended with the enumerated() method.</li> <li>Next, use string interpolation to print the level and score at each iteration. Make sure you add 1 to level because zero-based indexing starts at one. This way, the first loop iteration indicates level 1 instead of level 0.</li> </ol> <p>Run your code and review the output in the console. You should now have individual lines that increment the level number with the player\u2019s score for that level. For example:</p> <p>The score of level 1 is 10. The score of level 2 is 20. The score of level 3 is 30.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-2-display-final-game-score","title":"Step 2: Display final game score","text":"<p>Next, you will use the addition assignment operator to tally up the scores currently stored in the levelScores array to reflect the final game score. You will then print the final game score to the console once the game is finished.</p> <ol> <li>Create a variable for the game\u2019s score. Call it gameScore and set its initial value to 0.</li> <li>Use a for in loop to go through all elements in the levelScores array. The loop uses a constant that stores the score of the current game level.</li> <li>Add the individual level scores to the game\u2019s score with the addition assignment operator inside the for in loop.</li> <li>Print the final game\u2019s score to the console.</li> </ol> <p>Run your code and review the output. The output should display that the final game score is 280.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-3-display-the-weather-forecast-while-the-game-is-played","title":"Step 3: Display the weather forecast while the game is played","text":"<p>Now you will create a dictionary for the weather widget that displays the weather forecast in-game for the current week.</p> <ol> <li>Create a constant for the dictionary that will store the daily temperatures of the current week. Name it weeklyTemperatures and set its value to: [\"Monday\": 70, \"Tuesday\": 75, \"Wednesday\": 80, \"Thursday\": 85, \"Friday\": 90, \"Saturday\": 95, \"Sunday\": 100]. The dictionary\u2019s keys represent the days of the week and the values represent the daily temperatures.</li> <li>Use a for in loop to iterate weeklyTemperatures. And you a tuple to access the key and value at each iteration, for example: (day, temperature).</li> <li>Print the current day of the week and its daily temperature inside the for in loop.</li> </ol> <p>Run your code and review the output in the console.</p> <p>Notice that the days of the week aren\u2019t printed in their natural order. This is because dictionaries aren\u2019t ordered by default like arrays. You will fix this in the next step of the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#step-4-sequence-the-weather-forecast-accurately","title":"Step 4: Sequence the weather forecast accurately","text":"<p>In this final step of the exercise, you will use what is known as synchronized arrays to store the days of the week and temperatures in an ordered manner.</p> <ol> <li>Start by creating a constant for the first array. Name it days and set its value to [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"].</li> <li>Next, create another constant for a second array. This array will store the daily temperatures of the current week. Call it temperatures and set its value to [70, 75, 80, 85, 90, 95, 100].</li> <li>Use a for in loop with a closed range to go through all the elements in the range. The loop uses a constant that stores the current element in the range. The range\u2019s current element is the array index you use to synchronize the days array with the temperatures array during each loop iteration.</li> <li>Print the current day of the week and its daily temperature inside the for in loop. Reference both the days and temperatures arrays inside the print statement. Remember to include [index] in the string interpolation.</li> </ol> <p>Run your code and review the output. Notice that the days of the week are printed in their natural order since arrays are ordered by default.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>By completing this exercise, you demonstrated your ability to use for in loops with different collection types. You created arrays and dictionaries to store specific values, practiced using for in loops to iterate over the elements in the collection type, and learned how to use tuples to unpack the values stored in arrays.</p> <p>You should now be able to describe that the key difference between an array and a dictionary is that arrays use indices that order their elements properly, while dictionaries use keys that don't have a natural order for their values.</p> <pre><code>let levelScores = [10, 20, 30, 40, 50, 60, 70]\nfor (level, score) in levelScores.enumerated() {\nprint(\"The score of level \\(level + 1) is \\(score).\")\n}\nvar gameScore = 0\nfor levelScore in levelScores {\ngameScore += levelScore\n}\nprint(\"The game's score is \\(gameScore).\")\nlet weeklyTemperatures = [\n\"Monday\": 70, \"Tuesday\": 75, \"Wednesday\": 80, \"Thursday\": 85,\n\"Friday\": 90, \"Saturday\": 95, \"Sunday\": 100,\n]\nfor (day, temperature) in weeklyTemperatures {\nprint(\"The temperature on \\(day) is \\(temperature)\u00b0F.\")\n}\nlet days = [\n\"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nlet temperatures = [70, 75, 80, 85, 90, 95, 100]\nfor index in 0...6 {\nprint(\"The temperature on \\(days[index]) is \\(temperatures[index])\u00b0F.\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week2-Collections/#additional-resources","title":"Additional resources","text":"<p>The following resource from the Swift Programming Language Guide may be helpful as you continue learning about collections:</p> <p>Collection Types</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/","title":"Closures","text":"closures.swift<pre><code>var sayHello = {() -&gt; () in\nprint(\"Hello\")\n}\nsayHello()\n// Hello\nvar sayHelloTo = {(name: String) -&gt; () in\nprint(\"Hello \\(name)\")\n}\nsayHelloTo(\"Pejman\")\n// Hello Pejman\nvar maxNum = {(a: Int, b: Int) -&gt; Int in\nreturn a &gt; b ? a : b\n}\nprint(maxNum(1, 5))\n// 5\n</code></pre> <p>Zero and one can be viewed as indexes of an array. <code>$0</code> and <code>$1</code> is called shorthand argument names.</p> <pre><code>let letters = [\"H\" , \"E\" , \"X\" , \"A\"]\nlet myCollection = letters.sorted(by: { (string1: String, string2: String) -&gt; Bool in return string1 &lt; string2 } )\n// returns [\"A\", \"E\", \"H\", \"X\"]\u00a0\nlet newOrder = letters.sorted(by: {$0 &gt; $1})\n// returns [\"X\", \"H\", \"E\", \"A\"]\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#exercise-practice-using-closures","title":"Exercise: Practice using closures","text":"<p>You have learned that closures are anonymous functions. You can\u2019t call them by themselves like functions because they don\u2019t have a name. Closures are beneficial because they are like portable functions that work in conjunction with constants and variables. By completing this exercise, you will have the opportunity to practice writing a closure.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#scenario","title":"Scenario","text":"<p>You want to pass around the unlocking treasure chest instructions in your codebase. To extend this functionality, you will abstract the instructions into a closure. A closure allows you to save instructions to a variable/constant. You will use a constant instead of a variable because you only need to assign the closure once in this exercise. With the functionality contained in a constant, you can pass around the constant like any other constant. In addition to executing blocks of code, you can save a closure in a variable/constant. Thus, making a closure more versatile than a function. Saving a closure inside a variable/constant is an example showcase of its versatility. You will practice writing a closure to unlock a treasure chest in this exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-1-declare-a-variable","title":"Step 1: Declare a variable","text":"<p>To keep track of the number of gold bars, declare a variable called goldBars. You will begin your journey with zero gold bars. Set the variable value to 0.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-2-declare-a-constant","title":"Step 2: Declare a constant","text":"<p>Declare a constant called unlockTreasureChest. You\u2019ll attach a closure to this constant.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-3-set-the-constant-to-a-closure","title":"Step 3: Set the constant to a closure","text":"<p>Set the constant equal to a closure with:</p> <ul> <li>A parameter called inventory of type Int.</li> <li>An Int return type.</li> <li>An expression of inventory plus 100 in the body.</li> </ul> <p>Although you can use this closure, you can further simplify it to write less code without compromising functionality or intent expressiveness.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-4-refactor-the-closure","title":"Step 4: Refactor the closure","text":"<p>Set the constant equal to a closure with:</p> <ul> <li>An in-out parameter called inventory of type Int.</li> <li>A Void return type.</li> <li>A body consisting of inventory equal to itself plus 100.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-5-use-the-closure","title":"Step 5: Use the closure","text":"<p>Call the closure while passing in goldBars into the inventory parameter.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-6-print-the-variable","title":"Step 6: Print the variable","text":"<p>To ensure goldBars get incremented, print goldBars.</p> <p>Run your code and review the output. It should print 100 in the console log.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you created a closure. You also practiced implementing function-like features inside a closure</p> <pre><code>var goldBars: Int = 0\nlet unlockTreasureChest = {(inventory: inout Int) in\ninventory += 100\n}\nunlockTreasureChest(&amp;goldBars)\nprint(goldBars)\n// 100\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#exercise-use-functions-to-modularize-a-program","title":"Exercise: Use functions to modularize a program","text":"<p>You have practiced using functions and closures separately. However, you can also use functions and closures together. One benefit of using functions and closures together is the ability to have a function completion handler via a callback. By completing this exercise, you will have the opportunity to practice writing a completion handler.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#scenario_1","title":"Scenario","text":"<p>The protagonist pirate is looking to spend the accumulated gold bars. After spending the gold bars, players want to be notified of the remaining gold bars. To achieve this, you\u2019ll write a function with a completion handler.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#instructions_1","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-1-declare-a-variable_1","title":"Step 1: Declare a variable","text":"<p>To keep track of the number of gold bars, declare a variable called <code>goldBars</code>. Since players will already have gold bars in their inventory, set the variable value to 100.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-2-declare-a-function","title":"Step 2: Declare a function","text":"<p>Declare a function called spendTenGoldBars.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-3-add-an-in-out-parameter","title":"Step 3: Add an in-out parameter","text":"<p>In the function signature, add an in-out parameter of type Int with:</p> <ul> <li>An argument label called from.</li> <li>A parameter name called inventory.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-4-add-a-closure-parameter","title":"Step 4: Add a closure parameter","text":"<p>Now, you\u2019ll create a completion handler. In the function signature, add a closure as your second parameter called completion. Set completion\u2019s:</p> <ul> <li>Parameter as type Int. You\u2019ll use the closure parameter to return a value to the function caller.</li> <li>Return as type Void. Since you don\u2019t need to pass any value back to the closure, you set the return type as Void.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-5-minus-ten-gold-bars-from-the-inventory","title":"Step 5: Minus ten gold bars from the inventory","text":"<p>To modify the inventory parameter, add the following to the function body:</p> <ul> <li>inventory equal to itself minus 10.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-6-pass-the-new-inventory-value-into-the-closure","title":"Step 6: Pass the new inventory value into the closure","text":"<p>To return the new inventory value, call the completion closure and pass inventory into the closure parameter.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-7-print-the-initial-gold-bars","title":"Step 7: Print the initial gold bars","text":"<p>To see your initial gold bars, add the following print statement:</p> <p>print(\"You had (goldBars) gold bars.\")</p> <p>You should have the following in the console log:</p> <p>\"You had 100 gold bars.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-8-call-the-function-with-a-completion-handler","title":"Step 8: Call the function with a completion handler","text":"<p>Call the function while passing in goldBars in the parameter. Name the closure\u2019s argument label goldBars.</p> <p>A closure expression written in a function\u2019s final parameter is called a trailing closure.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-9-print-ten-gold-bars-spent","title":"Step 9: Print ten gold bars spent","text":"<p>To indicate the completion of spending ten gold bars, add the following print statement inside the completion closure:</p> <p>print(\"You spent ten gold bars.\")</p> <p>You should have the following in the console log:</p> <p>\"You spent ten gold bars.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#step-10-print-the-remaining-gold-bars","title":"Step 10: Print the remaining gold bars","text":"<p>To indicate the remaining gold bars, add the following print statement inside the completion closure and after the previous print statement:</p> <p>print(\"You have (goldBars) gold bars.\")</p> <p>You should have the following in the console log:</p> <p>\"You have 90 gold bars.\"</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you used functions and closures in conjunction to create a completion handler.</p> <pre><code>var goldBars = 100\nfunc spendTenGoldBars(from inventory: inout Int, completion: (Int) -&gt; Void) {\ninventory -= 10\ncompletion(inventory)\n}\nprint(\"You had \\(goldBars) gold bars.\")\nspendTenGoldBars(from: &amp;goldBars) { goldBars in\nprint(\"You spent ten gold bars.\")\nprint(\"You have \\(goldBars) gold bars.\")\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Closures/#additional-resources","title":"Additional resources","text":"<p>The following resource from the Swift Programming Language Guide may be helpful to further your learning of closures:</p> <p>Swift Closures</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/","title":"Functions","text":"<p>So far you have learned that:</p> <ul> <li>Functions are blocks of code that can be executed from other pieces of code.</li> <li>Each function performs a specific task.</li> <li>Functions allow you to reuse code.</li> </ul> <p>In this reading, you will explore examples of functions. You will reflect on what they are, why they are used, and most importantly, explore how to use them in your code.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#function-types","title":"Function Types","text":"<p>You learned that each function in Swift has a type:</p> <ul> <li>Optional parameter types: These parameters allow you to pass one or more values into the function when called.</li> <li>Optional return type: Allows the function to return one or more values back to the caller.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#calling-functions","title":"Calling Functions","text":"<p>You also learned that all functions have a name. To call a function, you execute its name followed by a pair of parentheses. The parentheses enclose an optional list of parameters.</p> <p>For example \u201cprint()\u201d is a function declared in the Swift library: print(\"Hello World\")</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#defining-a-function","title":"Defining a Function","text":"<p>To define a function, you have to tell the compiler three things:</p> <ul> <li>The name of the function</li> <li>The data type of the returned value(s)</li> <li>The data type(s) and names of any parameters (arguments)</li> </ul> <p>Once the above has been defined, the function can be called.</p> <p>Furthermore, a function has the following layout:</p> <pre><code>func functionName(arguments) -&gt;\u00a0ReturnType {\nExecute some code\nreturn ReturnType\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#a-simple-function-in-practice","title":"A simple function in practice","text":"<p>Next, let\u2019s review an example of defining a simple function.</p> <p>Below is a simple function named showPhi. It takes no parameters and does not return any values.</p> <p>When a function returns nothing, the return type is Void. Void is also an alias for (). You can use the two interchangeably. Typically a function that returns nothing wouldn't explicitly write Void or () as the return type. Nevertheless, it's helpful to know that the Void return type is implicit when an explicit function's return type isn't present.</p> <pre><code>func showPhi() {\nprint(\"The value of phi is (\u221a5 + 1) \u00f7 2\")\n}\n</code></pre> <p>You can now call this function from elsewhere like this:</p> <p>showPhi()</p> <p>Next, you'll review an example of a function that passes an argument.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#passing-parameters","title":"Passing parameters","text":"<p>The argument is a local variable that will hold the passed data. Take note that the type of argument\u00a0must be declared.</p> <pre><code>func double(passedValue: Int) {\nlet result = passedValue * 2\nprint(\"Double \\(passedValue) is \\(result)\")\n}\n</code></pre> <p>This function can now be called from elsewhere like this:</p> <p>double(passedValue: 10)</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#passing-multiple-parameters","title":"Passing multiple parameters.","text":"<p>You can pass multiple parameters to a function. Your function can also return a value.</p> <p>To return a value, specify the function's expected return type. The keyword return is used to return the final value. Return is also the last command the function will execute.</p> <p>The following example multiplies two numbers and returns the result:</p> <pre><code>func multiply(firstValue: Int, secondValue: Int) -&gt; Int {\nlet result = firstValue * secondValue\nreturn result\n}\n</code></pre> <p>This function can now be called from elsewhere like this:</p> <p>let result = multiply(firstValue: 10, secondValue: 3)</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#in-out-parameters","title":"In-out parameters","text":"<p>Function's parameters are <code>constants</code>. The compiler will not allow you to modify the parameters within the function body. To modify a parameter's value and persist the change, you use an in-out parameter. You declare an in-out parameter with the inout keyword before a parameter's type.</p> <p>Here is an example:</p> <pre><code>func increment(number: inout Int) {\nnumber += 1\nprint(number)\n}\nvar number = 0\nincrement(number: &amp;number)\n// 1\n</code></pre> <p>When passing a variable as an argument for an in-out parameter, you put an ampersand (&amp;) before passing the variable's name.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this reading, you reviewed how functions can be used to perform specific tasks. You also explored how functions can take parameters and return values. Furthermore, you explored how functions are used to make code reusable.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#exercise-practice-using-functions","title":"Exercise: Practice using functions","text":"<p>So far, you have learned that functions allow you to reuse blocks of code. In this exercise, you will have the opportunity to practice creating a function. By the time you complete this exercise, you will be able to write a function. This will enable you to call on blocks of code without writing the underlying code every time.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#scenario","title":"Scenario","text":"<p>Suppose you are creating a role-playing game where the protagonist is a pirate. The aim of the game is to journey across the seven seas and accumulate gold bars along the way.</p> <p>In this exercise, you will create a function to unlock treasure chests. Each time a treasure chest is unlocked, the player's gold bar inventory will increment by 100.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to start creating the pirate adventure.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-1-declare-a-variable","title":"Step 1: Declare a variable","text":"<ol> <li>To keep track of the number of gold bars, declare a variable called goldBars.</li> <li>Since the player will begin their journey with zero gold bars, set the variable value to 0.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-2-define-a-function","title":"Step 2: Define a function","text":"<p>Since pirates can unlock treasure chests more than once, it\u2019s worthwhile to define a function to reuse the code without having to write all the underlying code every time.</p> <p>Begin by defining a function called unlockTreasureChest.</p> <p>Tip: Notice that the function name describes the intent for the code inside the body.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-3-set-the-return-type","title":"Step 3: Set the return type","text":"<p>Your function will return an integer. For that reason, set the function signature return type to Int.</p> <p>Note: It\u2019s normal to see a compile error until you return an Int in the function body.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-4-add-a-parameter","title":"Step 4: Add a parameter","text":"<p>To pass the current gold bars into the function, add a parameter called inventory of type Int to the function signature.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-5-update-the-body","title":"Step 5: Update the body","text":"<p>In the function body, return inventory plus 100.</p> <p>The \"100\" value is an arbitrarily defined value. Essentially, the inventory increases by 100 gold bars each time a treasure chest opens. And the function you write calculates the sum of the inventory and 100 gold bars after opening a treasure chest.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-6-return-an-expression-implicitly","title":"Step 6: Return an expression implicitly","text":"<p>Since the function body consists of a single line of code as the function\u2019s return statement, you can return an implicit expression to make your code more succinct.</p> <p>Convert the function\u2019s return statement to an expression.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-7-call-the-function","title":"Step 7: Call the function","text":"<p>Next, suppose a player finds three treasure chests. To unlock and accumulate the gold bars from the treasure chests using your function, do the following:</p> <ol> <li>Set goldBars equal to calling the function with goldBars passed in the parameter.</li> <li>Print goldBars.</li> <li>Run your code and review the output. You should see 100 in the console log.</li> <li>Repeat steps 1, 2 and 3. You should see 200 in the console log.</li> <li>Repeat steps 1, 2 and 3 again. You should see 300 in the console log.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#concluding-thoughts_1","title":"Concluding thoughts","text":"<p>In this exercise, you created a function. You also practiced implementing a function parameter, return type, and body. In addition to this, you also used an expression in-place of a return statement.</p> <pre><code>var goldBars: Int = 0\nfunc unlockTreasureChest(inventory: Int) -&gt; Int {\n// return inventory + 100\n/*\n     * or\n     */\ninventory + 100\n}\ngoldBars = unlockTreasureChest(inventory: goldBars)\nprint(goldBars)\n// 100\ngoldBars = unlockTreasureChest(inventory: goldBars)\nprint(goldBars)\n// 200\ngoldBars = unlockTreasureChest(inventory: goldBars)\nprint(goldBars)\n// 300\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#more-examples","title":"More Examples","text":"<pre><code>func paramEx1 (fn: String, sn: String) {\nprint(\"Hello \\(fn) \\(sn).\")\n}\nparamEx1(fn: \"John\", sn: \"Doe\")\n// Hello John Doe.\nfunc paramEx2 (_ fn: String, _ sn: String) {\nprint(\"Hello \\(fn) \\(sn).\")\n}\nparamEx2(\"John\", \"Doe\")\n// Hello John Doe.\nfunc paramEx3 (firstname fn: String, surname sn: String) {\nprint(\"Hello \\(fn) \\(sn).\")\n}\nparamEx3(firstname: \"John\", surname: \"Doe\")\n// Hello John Doe.\n</code></pre> <ul> <li>Default value</li> </ul> <pre><code>func paramEx1 (fn: String, sn: String = \"Doe\") {\nprint(\"Hello \\(fn) \\(sn).\")\n}\nparamEx1(fn: \"John\")\n// Hello John Doe.\nparamEx1(fn: \"Jon\", sn: \"Snow\")\n// Hello Jon Snow.\n</code></pre> <ul> <li>variable as function</li> </ul> <pre><code>func sum2Ints (a: Int, b: Int) -&gt; Int {\nreturn a + b\n}\nvar myFunction: (Int, Int) -&gt; Int = sum2Ints\nprint(myFunction(2, 3))\n// 5\n</code></pre> <p>Note: As defined by the Swift programming language guide:</p> <p>The memberwise initializer is a shorthand way to initialize the member properties of new structure instances. Initial values for the properties of the new instance can be passed to the memberwise initializer by name.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#exercise-practice-writing-succinctly-expressive-functions","title":"Exercise: Practice writing succinctly expressive functions","text":"<p>You have learned about the basics of using functions in your code. In this exercise, you will practice additional function features and adding syntactic sugar in Swift. Syntactic sugar is about writing code in a way that is expressive and easy to read. This is beneficial for communicating your code to other developers and future self.</p> <p>By completing this exercise, you will be able to write more versatile and succinctly expressive functions.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#scenario_1","title":"Scenario","text":"<p>Suppose multiple developers share a common codebase to build a pirate game. Eventually, the developers will run into each other's code.</p> <p>Imagine this scenario:</p> <ol> <li>Developer B needs to use a function created by Developer A.</li> <li>Developer A\u2019s function is difficult to understand with a non-descriptive function name and difficult to read due to the verbose syntax.</li> <li>Developer B spends three days figuring out Developer A\u2019s code.</li> <li>Developer B is still unsure of the function\u2019s details.</li> <li>Developer B asks Developer A about the function details.</li> <li>Developer A forgets because the function\u2019s details were written six months ago.</li> <li>Developer A also could not figure out the function\u2019s intention because some parts of the function were not expressive.</li> </ol> <p>In this scenario, Developer B is having a challenging time understanding and reading Developer A\u2019s function. To clearly communicate the intention of a piece of code, it is helpful to write code expressively. To make reading code easy, it is helpful to write code succinctly. Writing expressive and succinctly written code is commonly referred to as syntactic sugar.</p> <p>In this function exercise, you will practice Swift syntactic sugar by utilizing a(n):</p> <ul> <li>Default parameter value.</li> <li>Argument label.</li> <li>In-out parameter.</li> </ul> <p>You will make a function more expressive and succinct than the original version.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#instructions_1","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to begin adding syntactic sugar to a Swift function.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-1-declare-a-variable_1","title":"Step 1: Declare a variable","text":"<ol> <li>To keep track of the number of gold bars in the pirate game, declare a variable called goldBars.</li> <li>Since the player will begin their journey with zero gold bars, set the variable value to 0.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-2-add-unsweetened-function","title":"Step 2: Add unsweetened function","text":"<p>Add the following function to your playground:</p> <pre><code>func incrementInventory(inventory: Int) -&gt; Int {\nreturn inventory + 100\n}\n</code></pre> <p>You will make this function more versatile and succinctly expressive.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-3-add-a-second-parameter","title":"Step 3: Add a second parameter","text":"<p>Every time you increment the inventory, it will always increment by 100. However, suppose you wish to increment it by a different value, that\u2019s currently not an option. To make a dynamic increment value possible, you can utilize a second parameter.</p> <p>Add a second parameter called amount of type Int to the function.</p> <p>Tip: You will set the default value in the function signature as well.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-4-update-the-body","title":"Step 4: Update the body","text":"<p>To utilize the recently added second parameter, replace 100 with amount in the function body.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-5-provide-a-default-parameter-value","title":"Step 5: Provide a default parameter value","text":"<p>When you want to make it an option for developers to call your function without necessarily passing in a value to the parameter each time, you can use a default parameter. For instance, if most treasure chests contain 100 gold bars and you would otherwise often need to pass in 100 in the parameter, you can reduce the verboseness of your code using a default parameter value.</p> <p>Provide amount with a default value of 100.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-6-add-an-argument-label","title":"Step 6: Add an argument label","text":"<p>Now, you\u2019ll look at Swift syntactic sugar. Succinctly expressive code improves communication between developers building on a common codebase.</p> <p>Currently, if you call your function, it may read something like \u201cincrement inventory inventory gold bars amount 200.\u201d What if you can make your function signature read more like an English sentence? Using an argument label can help you express your code to read more like an English sentence.</p> <p>In the function signature, add an argument label called by for the amount parameter.</p> <p>Now at the function call-site, your function may read something like \u201cincrement inventory inventory gold bars by 200\u201d.</p> <p>It's better, but can still be improved.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-7-omit-an-argument-label","title":"Step 7: Omit an argument label","text":"<p>To further express your function to read more like an English sentence, you can omit an argument label. In the function signature, omit inventory\u2019s argument label.</p> <p>Now at the function call-site, your function may read something like \u201cincrement gold bars by 200.\u201d That reads more expressively and succinctly.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-8-make-an-in-out-parameter","title":"Step 8: Make an in-out parameter","text":"<p>If you want to modify a function parameter value in Swift, you\u2019ll need to use an in-out parameter. In the function signature, convert inventory into an in-out parameter.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-9-set-the-in-out-parameter-value-in-the-body","title":"Step 9: Set the in-out parameter value in the body","text":"<p>You can now modify the inventory parameter value within the function body. You no longer need to call a function and set the function result to a variable as you did in a previous exercise.</p> <ol> <li>In the function body, set inventory equals itself plus amount.</li> <li>Remove the function\u2019s return type because you no longer need to return a value.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#step-10-calling-the-function","title":"Step 10: Calling the function","text":"<p>Suppose a player finds five treasure chests. To unlock and accumulate the gold bars from the treasure chests using your sweetened function, do the following:</p> <ol> <li>Call the function with goldBars passed in the inventory parameter.</li> <li>Print goldBars.</li> <li>Call the function with goldBars passed in the inventory parameter.</li> <li>Print goldBars.</li> <li>Call the function with goldBars passed in the inventory parameter.</li> <li>Print goldBars.</li> <li>Call the function with goldBars passed in the inventory parameter and 300 in the amount parameter.</li> <li>Print goldBars.</li> <li>Call the function with goldBars passed in the inventory parameter and 50 in the amount parameter.</li> <li>Print goldBars.</li> </ol> <p>Run your program and review the output in the console.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#concluding-thoughts_2","title":"Concluding thoughts","text":"<p>In this exercise, you sweetened a function with syntactic sugar. You practiced adding a second parameter, adding an argument label, setting a default parameter value, omitting an argument label, and working with an in-out parameter.</p> <pre><code>var goldBars = 0\nfunc incrementInventory(_ inventory: inout Int, by amount: Int = 100) {\ninventory += amount\n}\nincrementInventory(&amp;goldBars)\nprint(goldBars)\n//100\nincrementInventory(&amp;goldBars)\nprint(goldBars)\n//200\nincrementInventory(&amp;goldBars)\nprint(goldBars)\n//300\nincrementInventory(&amp;goldBars, by: 300)\nprint(goldBars)\n//600\nincrementInventory(&amp;goldBars, by: 50)\nprint(goldBars)\n//650\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week3-Functions/#additional-resources","title":"Additional resources","text":"<p>The following resource from the Swift Programming Language Guide may be helpful to further your learning of functions:</p> <p>Swift Functions</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/","title":"Classes","text":"<p>Reference type shares copy</p> <p>When a reference type, like a class, is assigned to a variable or a constant, a copy of the data is shared.</p> <p>Variables in <code>class</code> needs initializing.</p> <p>Class instances are unique unlike struct where instances are copied.</p> <p>The init() function is not only limited to classes.</p> <pre><code>class Recipe {\nvar ingredients: [String]\ninit(ingredients: [String]) {\nself.ingredients = ingredients\n}\n}\nvar marioRecipe = Recipe(\ningredients: [\"Cocoa powder\", \"Flour\"]\n)\nvar adrianRecipe = marioRecipe\nadrianRecipe.ingredients = [\"Chocolate chip\"]\nprint(marioRecipe.ingredients)\n// [\"Chocolate chip\"]\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#computed-properties","title":"<code>computed properties</code>","text":"<pre><code>class Rectangle {\nlet width: Int\nlet height: Int\n// computed properties\nvar area: Int {\nwidth * height\n}\n// computed properties\nvar perimeter: Int {\nwidth * 2 + height * 2\n}\ninit(width: Int, height: Int) {\nself.width = width\nself.height = height\n}\n}\nlet rectangle = Rectangle(width: 12, height: 5)\nprint(rectangle.perimeter)\n// 34\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#exercise-create-classes-with-stored-and-computed-properties","title":"Exercise: Create classes with stored and computed properties","text":""},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#overview","title":"Overview","text":"<p>You have learned that structs are value types while classes are a reference types (important points to remember) and both help encapsulate your code. Understanding how they differ will help you determine which to use in your code.</p> <p>When a value type, like a struct, is copied, you will have unique copies of the original and the new instance. When a reference type is copied, like a class, you will have one instance of the class that has two references to it.</p> <p>Tip: Structs are lightweight and classes are more involved. A lot happens behind the scenes in the creation of classes because it does a lot more than a struct would.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#scenario","title":"Scenario","text":"<p>The Little Lemon application design is rich with many images and other assets that give users more details about meals, promotions and discounts rather than just text. Your task is to write a class that represents an internal file of the application and can produce a full file name to load it later correctly for the users to review. You will use stored and computed properties in a class to achieve this.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#instructions","title":"Instructions","text":"<p>Create a new playground in XCode to complete this exercise. Refer to the How to complete exercises reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to complete the exercise.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#step-1-create-a-class-to-represent-a-local-file-with-two-stored-properties","title":"Step 1: Create a class to represent a local file with two stored properties","text":"<p>Create a class with stored properties that contain details about a file on a disk.</p> <ol> <li>Declare a class named LocalFile.</li> <li>Inside the class, add a constant named name and set its type to String. It will hold the name of the file.</li> <li>Also, since a file can have a certain extension like .png or .pdf, add another constant called fileExtension and also set its type to String.</li> </ol> <p>You should now have a class with two stored properties.</p> <p>Tip: Remember that variables or constants declared inside the class itself are called stored properties.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#step-2-declare-an-init-method-to-prepare-class-for-initialization-later","title":"Step 2: Declare an init method to prepare class for initialization later","text":"<p>To be able to initialize an instance of the class you just created, declare a custom initializer, also known as a \u201cconstructor function\u201d, inside of it.</p> <ol> <li>Inside the class, declare a new constructor function called init and add two arguments to it called name and fileExtension, both of type String.</li> <li>Inside the body of the constructor function, set its arguments to the stored properties of the class with the same name.</li> <li>Declare a keyword self followed by the dot and the stored property name and assign to it the argument of the constructor function with the same name. Do this for both stored properties of the class to initialize the values.</li> </ol> <p>To refresh your memory on creating a constructor function, please revisit the videos Classes in Swift and Creating classes with stored and computed properties.</p> <p>Tip: Remember that the constructor function of the class does not have a keyword func in the beginning and its name is always init. Also, if an argument of the constructor method has the same name as the property of the class, you have to use the keyword self when referencing the class property.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#step-3-create-a-computed-property-that-returns-a-full-file-name","title":"Step 3: Create a computed property that returns a full file name","text":"<p>So far, the class only contains name and file extension as separate properties. Use a computed property to be able to return a full file name.</p> <ol> <li>Declare a new variable inside the class and call it fullFileName.</li> <li>Set variable type to String.</li> <li>Instead of initializing it with a value, or setting it in the constructor function, put an empty block immediately after the type definition. You should end up with: var fullFileName: String {}. You have just created a computed property of the class.</li> <li>It does not do anything yet, so inside the curly brackets of the property, return the name constant added with the fileExtension constant. Use the addition operator (+) to achieve this.</li> </ol> <p>Tip: Recall that the computed property of the class has to be declared as a variable instead of a constant. In this case, it will only return something so we can declare a block of code it should perform right after the declaration of type.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#step-4-create-a-class-instance-to-verify-that-it-works-as-expected","title":"Step 4: Create a class instance to verify that it works as expected","text":"<p>Create a class object and call the computed property to test that it works correctly</p> <ol> <li>Outside of the class, declare a new constant and call it file.</li> <li>Initialize the constant with a new LocalFile class instance.<ol> <li>Call the class constructor method passing the image for the name argument, and .png for the file extension.</li> </ol> </li> <li>Set the result to the file constant.</li> <li>Add a print statement and pass the fullFileName property of the file object to it as an argument.</li> </ol> <p>Tip: remember to use dot syntax in the print statement.</p> <p>Run the code and verify the output inside the console. The consoles should log: image.png</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#conclusion","title":"Conclusion","text":"<p>In this exercise, you created a class that represents a local file on disk and can return the full name of the file combining the information inside the class. You proved your ability to work with a class together with stored and computed properties.</p> <pre><code>class LocalFile {\nlet name: String\nlet fileExtension: String\nvar fullFileName: String {\nname + \".\" + fileExtension\n}\ninit(name: String, fileExtension: String) {\nself.name = name\nself.fileExtension = fileExtension\n}\n}\nlet file = LocalFile(name: \"Greek_salad\", fileExtension: \"png\")\nprint(file.fullFileName)\n// Greek_salad.png\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Classes/#additional-resources","title":"Additional resources","text":"<p>To further your understanding of Classes and how to use Classes review the following resources.</p> <ul> <li>Class</li> <li>Value and reference types</li> <li>Initialization</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/","title":"Structures","text":"<p>Value type creates own copy</p> <pre><code>struct Recipe {\nlet name: String\n// Order doesn't matter \ud83d\udc47\nvar ingredients: Set&lt;String&gt;\n// Order does matter \ud83d\udc47\nvar steps: [String]\nfunc printDescription() {\nprint(\"Recipe: \\(name).\")\nprint(\"Ingredients: \\(ingredients).\")\nfor (idx, step) in steps.enumerated() {\nprint(\"\\(idx + 1). \\(step).\")\n}\n}\n}\nlet chocolateCookieRecipe = Recipe(\nname: \"Chocolate Cookie\",\ningredients: [\n\"Cocoa powder\",\n\"Chocolate chip\",\n\"Flour\"\n],\nsteps: [\n\"First step\",\n\"Second step\",\n\"Third step\"\n]\n)\nchocolateCookieRecipe.printDescription()\n</code></pre> <ul> <li>Output:</li> </ul> <pre><code>Recipe: Chocolate Cookie.\nIngredients: [\"Cocoa powder\", \"Flour\", \"Chocolate chip\"].\n1. First step.\n2. Second step.\n3. Third step.\n</code></pre> <p>Methods by default can't alter the values of it's properties. but <code>mutating methods</code> can!</p> <pre><code>struct numberHandler {\nvar order = 0\nmutating func increase (){\norder += 1\n}\nmutating func decrease() {\norder -= 1\n}\n}\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#exercise-create-a-structure-with-a-mutating-method","title":"Exercise: Create a structure with a mutating method","text":""},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#overview","title":"Overview","text":"<p>So far, you\u2019ve learned that a struct creates a value-type instance that allows you to bundle related code into a single package. You\u2019ve also explored how this code encapsulation takes place in the form of properties and methods defined in a struct.</p> <p>In this activity, you will practice using mutating methods to alter struct properties.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#scenario","title":"Scenario","text":"<p>At Little Lemon, customers can book table reservations in various ways. You are tasked with creating a structure to hold the booking information for each person, including their name and the table number. It should also be possible to update the person\u2019s name to accommodate any booking changes.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the How to complete exercises reading to refresh your memory on creating and launching a new playground in XCode.</p> <p>Once you have created a new playground, follow the steps below to implement the functionality of storing booking information in a struct.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-1-declare-a-struct-to-hold-table-booking-information","title":"Step 1: Declare a struct to hold table booking information","text":"<p>To store a booking with information you will use a struct type. To do this, declare an empty struct and call it TableReservation.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-2-add-information-inside-the-struct","title":"Step 2: Add information inside the struct","text":"<p>Inside the struct, create properties to hold the customer\u2019s name and the table number:</p> <ol> <li>Inside the struct, declare a new variable and call it a name. Set its type to String.</li> <li>Declare a constant to hold a table number and call it tableNumber. Set its type to Int.</li> </ol> <p>Tip: Remember that a struct can be used to group similar information together using properties. To refresh your memory on adding properties to a struct, please revisit the video: What is a structure?</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-3-create-a-new-table-reservation","title":"Step 3: Create a new table reservation","text":"<p>Next, create a new struct instance to represent a table reservation.</p> <ol> <li>Declare a new variable called johnBooking and initialize it with a new instance of the TableReservation struct.</li> <li>Pass John to the name argument and 1 to the tableNumber argument.</li> </ol> <p>Tip: Recall that a struct provides a default memberwise initializer. You do not have to write the initializer method explicitly.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-4-output-the-reservation-to-the-console","title":"Step 4: Output the reservation to the console","text":"<ol> <li>Write a new print statement and pass the johnBooking variable to it as an argument.</li> <li>Run your code and review the output. All properties with their values of the struct should be logged in the console: TableReservation(name: \"John\", tableNumber: 1)</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-5-define-a-method-to-update-the-name-of-the-customer","title":"Step 5: Define a method to update the name of the customer","text":"<p>Suppose that you need to change the name from John to Maria for table 1. As you may recall, all the functions inside the struct that change its properties have to be in a mutating expression.</p> <p>In this step, create a mutating method that updates the name of the customer.</p> <ol> <li>Declare a new function inside the struct called updateBooking. It should have one parameter called updatedName of type String.</li> <li>Insert the mutating keyword before the function definition.</li> </ol> <p>Tip: Remember that struct functions that modify their parameters have to be declared as \u201cmutating\u201d by adding a mutating keyword before the function definition begins.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-6-implement-a-method-to-update-the-customers-name","title":"Step 6: Implement a method to update the customer\u2019s name","text":"<p>Inside the updateBooking function, add a line that sets the struct name property to a new updatedName value that the function gets as its argument.</p> <p>Tip: To refresh your memory on implementing methods, please revisit the video: What are mutating methods?</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-7-update-the-name-of-the-customer-for-the-reservation","title":"Step 7: Update the name of the customer for the reservation","text":"<ol> <li>On a new line, call the updateBooking method on the johnbooking variable defined before using dot syntax.</li> <li>Assign Maria to the updatedName argument.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#step-8-output-the-booking-to-console-to-confirm-the-change","title":"Step 8: Output the booking to console to confirm the change","text":"<ol> <li>Add a new print statement and pass johnBooking to it as an argument.</li> <li>Now run the code and review the output. The name property should reflect Maria instead of John.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#conclusion","title":"Conclusion","text":"<p>In this exercise, you have practiced creating a struct that holds properties and functions for a table booking. You also created a function inside the struct that modifies its properties and you declared that function as mutating. You also initialized the struct and used the function inside it to update struct properties.</p> <pre><code>struct TableReservation {\nvar name: String\nvar tableNumber: Int\nmutating func updateBooking(updatedName: String) {\nname = updatedName\n}\n}\nvar johnBooking = TableReservation(name: \"John\", tableNumber: 1)\nprint(johnBooking)\n// TableReservation(name: \"John\", tableNumber: 1)\njohnBooking.updateBooking(updatedName: \"Maria\")\nprint(johnBooking)\n// TableReservation(name: \"Maria\", tableNumber: 1)\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week4-Structures/#additional-resources","title":"Additional resources","text":"<p>To further your understanding of structs, review the following resources:</p> <ul> <li>Struct as general-purpose programming blocks</li> <li>Self and mutating methods</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/","title":"Part 1: Create the banking system","text":"<p>In this exercise, you will practice working with loops and switch statements to create a bank account. You will configure the account to be a debit or credit account. To achieve this, you will use loops and switch statements to process user input from the console and implement the bank account\u2019s creation logic.</p> <p>After completing this exercise, your output to the console should resemble the following:</p> <pre><code>Welcome to your virtual bank system.\nWhat kind of account would you like to open?\n1. Debit account\n2. Credit account\nThe selected option is 1.\nYou have opened a debit account.\n</code></pre> Note <p>The exercise generates random numbers for user input. Your output might be slightly different than the above.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise. Refer to the \u201cHow to complete exercises\u201d reading to refresh your memory on creating and launching a new playground in Xcode.</p> <p>Once you have created a new playground, follow the steps below to create your very own bank account.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#tips","title":"Tips","text":"<ul> <li>Use repeat while loops to create the bank account based on the user\u2019s choice. Refer to the Examples of loops in Swift reading.</li> <li>Use switch statements to select the right bank account type from the list of bank account types provided by the virtual bank system interface. Refer to theSwitch statements reading.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#step-1-start-the-virtual-bank-system-interface","title":"Step 1: Start the virtual bank system interface","text":"<p>First, power on the virtual bank system interface that will guide users through the bank account setup process.</p> <p>To achieve this, create a class with a method to greet the customer and another to onboard the customer on account opening. Use print statements to display the following on the interface:</p> <p>Welcome to your virtual bank system.</p> <p>What kind of account would you like to open?</p> <p>1. Debit account</p> <p>2. Credit account</p> <p>Note: Use 1 print statement to print the welcome message in one method. Use 3 print statements in another method to ask the customer and display the different account options.</p> <p>Instantiate a virtual bank system constant. Then, welcome the customer with the welcome customer method. You will simulate the user input later.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#step-2-create-a-property-for-the-bank-account-type","title":"Step 2: Create a property for the bank account type","text":"<p>Next, create a mutable property to store the bank account type. Call it accountType and set its value to \"\" (empty string).</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#step-3-create-the-bank-account-type-based-on-user-input","title":"Step 3: Create the bank account type based on user input","text":"<p>To take the user input to make a bank account, create a method with numberPadKey of type Int in the parameter. Inside the method body, add a print statement that prints \u201cThe selected option is...\u201d. Use string interpolation to access the value of the numberPadKey variable inside the print statement.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#defining-the-account-type-based-on-user-input","title":"Defining the account type based on user input","text":"<p>Next, you will declare a switch statement inside the repeat while loop. The switch statement selects the bank account from the options provided by the interface using the value of the numberPadKey parameter. This changes the value of the accountType variable based on the generated random number. This means that a valid bank account will be created if the user\u2019s input is valid.</p> <p>Tip: Refer to the Switch statements reading to refresh your memory on using switch statements.</p> <ol> <li>Assign \"debit\" to the accountType variable in the first switch case inside the switch statement of the loop. This means that a debit account is created if the generated user input is 1.</li> <li>Assign \"credit\" to the accountType variable in the second switch case inside the switch statement of the loop. This means that a credit account is created if the generated user input is 2.</li> <li>Finally, add a default case to the switch statement inside the loop to make it exhaustive. The default case handles all values of the input variable that other switch cases don\u2019t handle. Add a print statement that prints \"Invalid input:\" followed by the numberPadKey. This means that no bank account is created because the user\u2019s input is invalid.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#display-account-type","title":"Display account type","text":"<p>Finally, print the type of bank account that has been created. Your print statement may read:</p> <p>\"You have opened a ... account.\"</p> <p>Use string interpolation to access the value of the accountType variable inside the print statement.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#step-4-welcoming-customer-with-a-virtual-bank-system-instance","title":"Step 4: Welcoming customer with a virtual bank system instance","text":"<p>Now, you will bring your virtual bank system into existence and have the system greet your customer.</p> <p>Create a virtual bank system class instance. Call the welcome customer method.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#step-5-generating-user-input-in-the-repeat-while-loop","title":"Step 5: Generating user input in the repeat while loop","text":"<p>You will start by defining a repeat while loop that generates user input using random numbers. If the numbers generated are either 1 or 2, the bank account will be created. The loop should repeat itself as long as the accountType variable\u2019s value is equal to an empty string. If the generated user input is valid the first time the loop runs, the loop will conclude. If the generated input is invalid, the loop will repeat until the generated user input is valid.</p> <p>Don't worry if this sounds complicated, the steps below will guide you through the process.</p> <p>Refer to the Examples of loops in Swift reading in module 1 to refresh your memory on using repeat while loops and the random(in:) method.</p> <p>Inside the repeat while loop:</p> <ol> <li>Providing the user with account opening instructions. Call the onboard customer account opening method.</li> <li>Next, use the random(in:) method to generate a random number between 1 and 5 to simulate the user input. The random(in:) method uses a closed range of integers that defines the lower and upper bounds of the generated random numbers. Assign the generated random number to the numberPadKey constant.</li> </ol> <p>You are generating between 1 and 3 so that the range accommodates invalid cases.</p> <ol> <li>Call the make account method and pass the randomly generated user input into the numberPadKey parameter.</li> </ol>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part1/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you worked with loops and switch statements to create your banking system and process user input from the console. You will define the bank account\u2019s operations in the next exercise.</p> <pre><code>class VirtualBankSystem {\nvar accountType = \"\"\nfunc welcomeCustomer() {\nprint(\"Welcome to your virtual bank system.\")\n}\nfunc onboardCustomerAccountOpening() {\nprint(\"What kind of account would you like to open?\")\nprint(\"1. Debit account\")\nprint(\"2. Credit account\")\n}\nfunc makeAccount(numberPadKey: Int) {\nprint(\"The selected option is \\(numberPadKey).\")\nswitch numberPadKey {\ncase 1:\naccountType = \"debit\"\ncase 2:\naccountType = \"credit\"\ndefault:\nprint(\"Invalid input: \\(numberPadKey)\")\nreturn\n}\nprint(\"You have opened a \\(accountType) account.\")\n}\n}\nlet virtualBankSystem = VirtualBankSystem()\nvirtualBankSystem.welcomeCustomer()\nrepeat {\nvirtualBankSystem.onboardCustomerAccountOpening()\nlet numberPadKey = Int.random(in: 1...3)\nvirtualBankSystem.makeAccount(numberPadKey: numberPadKey)\n} while virtualBankSystem.accountType == \"\"\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/","title":"Part 2: Define the bank account operations","text":"<p>In this exercise, you will practice working with functions and conditional statements to implement the bank account operations for the account you created. You will use these operations when you manage the account in the last exercise of the project.</p> <p>Bank account users can withdraw money from or deposit money in their accounts. You will use functions and conditional statements to handle the different bank account operations logic.</p> <p>After completing the exercise, your console output the log below:</p> <pre><code>Debit balance: $0\nDebit deposit: $100. Debit balance: $100\nDebit withdraw: $20. Debit balance: $80\nInsufficient funds to withdraw $81. Debit balance: $80\nAvailable credit: $100\nInsufficient credit to withdraw $101. Available credit: $100\nCredit withdraw: $100. Available credit: $0\nCredit deposit: $50. Available credit: $50\nCredit deposit: $50. Available credit: $100\nPaid off credit balance.\nCredit deposit: $100. Available credit: $200\nOverpaid credit balance.\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#instructions","title":"Instructions","text":"<p>Create a new playground in Xcode to complete this exercise.\u00a0Once you have created a new playground, follow the steps below.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#tips-and-resources","title":"Tips and resources","text":"<ul> <li>Use functions to create the bank account operations. Refer to the Introductions to functions video in module 3 to refresh your memory on working with functions.</li> <li>Use conditional statements to implement the logic of account withdrawals and deposits. Refer to the If, if/else and else/if statements video in module 1 to refresh your memory on working with conditional statements.</li> </ul>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-1-define-the-bank-account-structure","title":"Step 1: Define the bank account structure","text":"<p>Define a structure called BankAccount. You will use the structure to encapsulate the different banking operations.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-2-create-debit-and-credit-bank-balance-properties","title":"Step 2: Create debit and credit bank balance properties","text":""},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#creating-stored-properties","title":"Creating stored properties","text":"<p>Create a debitBalance variable stored property with a 0 default value.This variable is the starting debit balance. You will use the debit banking operations on this account balance.</p> <p>Create a creditBalance variable stored property with a 0 default value. This variable is the starting credit balance.</p> <p>Create a creditLimit constant stored property and assign 100 to it.You will use the credit banking operations on these properties.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#creating-computed-properties","title":"Creating computed properties","text":"<p>Create a debitBalanceInfo computed property of type String that returns \u201cDebit balance: $\u201d followed by debitBalance. You will use this computed property when working with debit banking operations.</p> <p>Create an availableCredit computed property of type Int that returns the sum of creditLimit and creditBalance. This computed property calculates the bank account user\u2019s credit spending power.</p> <p>Next, create a creditBalanceInfo computed property of type String that returns \u201cAvailable credit: $\u201d followed by availableCredit. You will use this computed properties when working with credit banking operations.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-3-implement-the-deposit-operation-for-debit-and-credit-bank-accounts","title":"Step 3: Implement the deposit operation for debit and credit bank accounts","text":"<p>Next, implement the methods that handle the deposit operation for debit and credit bank balances.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#debit-deposit","title":"Debit deposit","text":"<p>Do the following to create the function's prototype:</p> <ol> <li>Declare a method called debitDeposit with an amount parameter of type integer.</li> <li>Omit the argument label of the amount parameter.</li> </ol> <p>In the method body, add the following logic:</p> <ol> <li>Use the addition assignment operator to add the amount value to the balance variable and assign the result to the balance variable.</li> <li>In the if statement body, print \"Deposited $\" followed by amount, ., and debitBalanceInfo using string interpolation.</li> </ol> <p>You've completed the debit deposit operation for debit bank balances.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#credit-deposit","title":"Credit deposit","text":"<p>Do the following to create the function's prototype:</p> <ol> <li>Declare a method called creditDeposit with an amount parameter of type integer.</li> <li>Omit the argument label of the amount parameter.</li> </ol> <p>In the method body, add the following logic:</p> <ol> <li>Use the addition assignment operator to add the amount value to the balance variable and assign the result to the balance variable.</li> <li>In the if statement body, print \"Credit $\" followed by amount, ., and creditBalanceInfo using string interpolation.</li> <li>Add an if statement to check if the creditBalance value equals 0.</li> <li>In the if statement body, print \"Paid off credit balance.\".</li> <li>Add an else if clause to the if statement.</li> <li>In the else if statement body, print \"Overpaid credit balance.\".</li> </ol> <p>You've completed the credit deposit operation for credit bank balances.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-4-implement-the-withdrawal-operation-for-debit-and-credit-bank-accounts","title":"Step 4: Implement the withdrawal operation for debit and credit bank accounts","text":"<p>Next, you will implement the methods to handle the withdrawal operation of debit and credit bank balances.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#debit-withdraw","title":"Debit withdraw","text":"<p>Do the following to create the function's prototype:</p> <ol> <li>Declare a method called debitWithdraw with an amount parameter of type integer.</li> <li>Omit the argument label of the amount parameter.</li> </ol> <p>In the method body, add the following logic:</p> <ol> <li>Add an if statement to check if the amount value is greater than the debitBalance value.</li> <li>In the if statement body, print \"Insufficient fund to withdraw $\" followed by amount, ., and debitBlanceInfo using string interpolation.</li> <li>Add an else clause to the if statement.</li> <li>In the else statement body, use the subtraction assignment operator to subtract amount value from the debit balance variable.</li> <li>Print the \"Debit withdraw: $\" followed by amount, . and debitBalanceInfo using string interpolation.</li> </ol> <p>You've completed the withdrawal operation for the debit balance.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#credit-withdraw","title":"Credit withdraw","text":"<p>Do the following to create the function's prototype:</p> <ol> <li>Declare a method called creditWithdraw with an amount parameter of type integer.</li> <li>Omit the argument label of the amount parameter.</li> </ol> <p>In the function body, add the following logic:</p> <ol> <li>Add an if statement to check if the amount value is greater than the availableCredit value.</li> <li>In the if statement body, print \"Insufficient credit to withdraw $\" followed by amount, ., and creditBalanceInfo using string interpolation.</li> <li>Add an else clause to the if statement.</li> <li>In the else statement body, use the subtraction assignment operator to subtract amount value from the credit balance variable.</li> <li>Print the \"Credit withdraw: $\" followed by amount, . and creditBalanceInfo using string interpolation.</li> </ol> <p>You've completed the withdrawal operation for the credit balance.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-5-create-a-bank-account-instance","title":"Step 5: Create a bank account instance","text":"<p>Create a bank account instance and assign it to a bankAccount variable at the bottom of the playground.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-6-test-the-debit-banking-operations","title":"Step 6: Test the debit banking operations","text":"<p>To check on the current debit balance, print debitBalanceInfo.</p> <p>The console log should output:</p> <pre><code>Debit balance: $0\n</code></pre> <p>The current debit balance is $0.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#deposit","title":"Deposit","text":"<p>Now, test the method that handles the deposit operation for debit bank accounts.</p> <p>Call debitDeposit(_:) and pass 100 as the argument for the amount parameter. The console log should output:</p> <pre><code>Debit deposit: $100. Debit balance: $100\n</code></pre> <p>You have withdrew $20 from your bank account\u2019s debit balance.</p> <p>Call debitWithdraw(_:) and pass 81 as the argument for the amount parameter. The console log should output:</p> <pre><code>Debit withdraw: $20. Debit balance: $80\n</code></pre> <p>You have withdrew $20 from your bank account\u2019s debit balance.</p> <p>Call debitWithdraw(_:) and pass 81 as the argument for the amount parameter. The console log should output:</p> <pre><code>Insufficient funds to withdraw $81. Debit balance: $80\n</code></pre> <p>After each debit withdrawal, the method outputs insufficient funds if the balance is below the withdrawal amount.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#step-7-test-the-credit-banking-operations","title":"Step 7: Test the credit banking operations","text":"<p>Now test the methods that handle the withdrawal and deposit operations for credit bank accounts. Because there is a credit line in the credit bank account, you can withdraw money from the bank account before making a deposit.</p> <p>To check on the current credit balance, print creditBalanceInfo. The console log should output:</p> <pre><code>Available credit: $100\n</code></pre> <p>The current available credit is $100.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#withdraw","title":"Withdraw","text":"<p>Unlike a debit bank account, a credit bank account allows you to withdraw up to the available credit on the account. Now, test the method that handles the withdraw operation for credit bank accounts.</p> <p>Call creditWithdraw(_:) and pass 101 as the argument for the amount parameter. The console log should output:</p> <pre><code>Insufficient\u00a0credit\u00a0to\u00a0withdraw\u00a0$101.\u00a0Available\u00a0credit:\u00a0$100\n</code></pre> <p>Because $101 exceeds the available credit on the balance, the method outputs insufficient credit for the withdrawal.</p> <p>Call creditWithdraw(_:) and pass 100 as the argument for the amount parameter. The console log should output:</p> <pre><code>Credit\u00a0withdraw:\u00a0$100.\u00a0Available\u00a0credit:\u00a0$0\n</code></pre> <p>After each credit withdraw operation, the console log outputs the withdraw amount and the latest available credit status.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#deposit_1","title":"Deposit","text":"<p>Now, test the method that handles the deposit operation for credit bank accounts.</p> <p>Call creditDeposit(_:) and pass 50 as the argument for the amount parameter. The console log should output:</p> <pre><code>Credit\u00a0deposit:\u00a0$50.\u00a0Available\u00a0credit:\u00a0$50\n</code></pre> <p>You have deposited $50 to your bank account\u2019s debit balance.</p> <p>Again, call creditDeposit(_:) and pass 50 as the argument for the amount parameter. The console log should output:</p> <pre><code>Credit\u00a0deposit:\u00a0$50.\u00a0Available\u00a0credit:\u00a0$100\nPaid\u00a0off\u00a0credit\u00a0balance.\n</code></pre> <p>The credit deposit operation will inform the user if they have paid off the account balance.</p> <p>Again, call creditDeposit(_:) and pass 50 as the argument for the amount parameter. The console log should output:</p> <pre><code>Credit\u00a0deposit:\u00a0$100.\u00a0Available\u00a0credit:\u00a0$200\nOverpaid\u00a0credit\u00a0balance.\n</code></pre> <p>The credit deposit operation will inform the user if they have overpaid the credit account balance.</p>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part2/#concluding-thoughts","title":"Concluding thoughts","text":"<p>In this exercise, you worked with functions and conditional statements to create a bank account\u2019s operations. You will use these operations to manage the bank account in the final exercise of the project.</p> <pre><code>struct BankAccount {\nvar debitBalance = 0\nvar creditBalance = 0\nlet creditLimit = 100\nvar debitBalanceInfo: String {\n\"Debit balance: $\\(debitBalance)\"\n}\nvar availableCredit: Int {\ncreditLimit + creditBalance\n}\nvar creditBalanceInfo: String {\n\"Available credit: $\\(availableCredit)\"\n}\nmutating func debitDeposit(_ amount: Int) {\ndebitBalance += amount\nprint(\"Debit deposit: $\\(amount). \\(debitBalanceInfo)\")\n}\nmutating func debitWithdraw(_ amount: Int) {\nif amount &gt; debitBalance {\nprint(\"Insufficient funds to withdraw $\\(amount). \\(debitBalanceInfo)\")\n} else {\ndebitBalance -= amount\nprint(\"Debit withdraw: $\\(amount). \\(debitBalanceInfo)\")\n}\n}\nmutating func creditDeposit(_ amount: Int) {\ncreditBalance += amount\nprint(\"Credit deposit: $\\(amount). \\(creditBalanceInfo)\")\nif creditBalance == 0 {\nprint(\"Paid off credit balance.\")\n} else if creditBalance &gt; 0 {\nprint(\"Overpaid credit balance.\")\n}\n}\nmutating func creditWithdraw(_ amount: Int) {\nif amount &gt; availableCredit {\nprint(\"Insufficient credit to withdraw $\\(amount). \\(creditBalanceInfo)\")\n} else {\ncreditBalance -= amount\nprint(\"Credit withdraw: $\\(amount). \\(creditBalanceInfo)\")\n}\n}\n}\nvar bankAccount = BankAccount()\nprint(bankAccount.debitBalanceInfo)\nbankAccount.debitDeposit(100)\nbankAccount.debitWithdraw(20)\nbankAccount.debitWithdraw(81)\nprint(bankAccount.creditBalanceInfo)\nbankAccount.creditWithdraw(101)\nbankAccount.creditWithdraw(100)\nbankAccount.creditDeposit(50)\nbankAccount.creditDeposit(50)\nbankAccount.creditDeposit(100)\n</code></pre>"},{"location":"PFiS-Course-3/Programming-Fundamentals-in-Swift-Week5-Part3/","title":"Final Result","text":"VirtualBank.swift<pre><code>class VirtualBankSystem {\nvar accountType = \"\"\nvar isOpened = true\nfunc welcomeCustomer() {\nprint(\"Welcome to your virtual bank system.\")\n}\nfunc onboardCustomerAccountOpening() {\nprint(\"What kind of account would you like to open?\")\nprint(\"1. Debit account\")\nprint(\"2. Credit account\")\n}\nfunc makeAccount(numberPadKey: Int) {\nprint(\"The selected option is \\(numberPadKey).\")\nswitch numberPadKey {\ncase 1:\naccountType = \"debit\"\ncase 2:\naccountType = \"credit\"\ndefault:\nprint(\"Invalid input: \\(numberPadKey)\")\nreturn\n}\nprint(\"You have opened a \\(accountType) account.\")\n}\nfunc transferMoney(transferType: String, transferAmount: Int, bankAccount: inout BankAccount) {\nswitch transferType {\ncase \"withdraw\":\nif accountType == \"credit\" {\nbankAccount.creditWithdraw(transferAmount)\n} else if accountType == \"debit\" {\nbankAccount.debitWithdraw(transferAmount)\n}\ncase \"deposit\":\nif accountType == \"credit\" {\nbankAccount.debitDeposit(transferAmount)\n} else if accountType == \"debit\" {\nbankAccount.debitDeposit(transferAmount)\n}\ndefault:\nprint(\"Account transfer type isn't valid!\")\nbreak\n}\n}\nfunc checkBalance(bankAccount: BankAccount) {\nswitch accountType {\ncase \"credit\":\nprint(\"Credit Balance Informartion\\(bankAccount.creditBalanceInfo)\")\ncase \"debit\":\nprint(\"Debit Balance Informartion\\(bankAccount.debitBalanceInfo)\")\ndefault:\nbreak\n}\n}\n}\nstruct BankAccount {\nvar debitBalance = 0\nvar creditBalance = 0\nlet creditLimit = 100\nvar debitBalanceInfo: String {\n\"Debit balance: $\\(debitBalance)\"\n}\nvar availableCredit: Int {\ncreditLimit + creditBalance\n}\nvar creditBalanceInfo: String {\n\"Available credit: $\\(availableCredit)\"\n}\nmutating func debitDeposit(_ amount: Int) {\ndebitBalance += amount\nprint(\"Debit deposit: $\\(amount). \\(debitBalanceInfo)\")\n}\nmutating func debitWithdraw(_ amount: Int) {\nif amount &gt; debitBalance {\nprint(\"Insufficient funds to withdraw $\\(amount). \\(debitBalanceInfo)\")\n} else {\ndebitBalance -= amount\nprint(\"Debit withdraw: $\\(amount). \\(debitBalanceInfo)\")\n}\n}\nmutating func creditDeposit(_ amount: Int) {\ncreditBalance += amount\nprint(\"Credit deposit: $\\(amount). \\(creditBalanceInfo)\")\nif creditBalance == 0 {\nprint(\"Paid off credit balance.\")\n} else if creditBalance &gt; 0 {\nprint(\"Overpaid credit balance.\")\n}\n}\nmutating func creditWithdraw(_ amount: Int) {\nif amount &gt; availableCredit {\nprint(\"Insufficient credit to withdraw $\\(amount). \\(creditBalanceInfo)\")\n} else {\ncreditBalance -= amount\nprint(\"Credit withdraw: $\\(amount). \\(creditBalanceInfo)\")\n}\n}\n}\nlet virtualBankSystem = VirtualBankSystem()\nvirtualBankSystem.welcomeCustomer()\nrepeat {\nvirtualBankSystem.onboardCustomerAccountOpening()\nlet numberPadKey = Int.random(in: 1...3)\nvirtualBankSystem.makeAccount(numberPadKey: numberPadKey)\n} while virtualBankSystem.accountType == \"\"\nlet transferAmount = 50\nprint(\"Transfer amount: $\\(transferAmount)\")\nvar bankAccount = BankAccount()\nrepeat {\nprint(\"What would you like to do?\")\nprint(\"1. Check bank account\")\nprint(\"2. Withdraw money\")\nprint(\"3. Deposit money\")\nprint(\"4. Close the system\")\nlet option = Int.random(in: 1...5)\nprint(\"Selected option is \\(option).\")\nswitch option {\ncase 1:\nvirtualBankSystem.checkBalance(bankAccount: bankAccount)\ncase 2:\nvirtualBankSystem.transferMoney(\ntransferType: \"witdraw\",\ntransferAmount: transferAmount,\nbankAccount: &amp;bankAccount\n)\ncase 3:\nvirtualBankSystem.transferMoney(\ntransferType: \"deposit\",\ntransferAmount: transferAmount,\nbankAccount: &amp;bankAccount\n)\ncase 4:\nvirtualBankSystem.isOpened = false\nprint(\"The system is closed.\")\ndefault:\nbreak\n}\n} while virtualBankSystem.isOpened\n</code></pre>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/","title":"Version Control Categories","text":""},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#cvcs","title":"CVCS","text":"<p>Centralized version control systems,\u00a0or CVCS for short,\u00a0contain a server and a client.\u00a0The server contains the main repository that\u00a0houses the full history of versions of the code base.\u00a0Developers working on projects using\u00a0a centralized system need to pull\u00a0down the code from the server to their local machine.\u00a0This gives the user\u00a0their own working copy of the code base.\u00a0The server holds the full history of changes.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#dvcs","title":"DVCS","text":"<p>Distributed version control systems or DVCS for short,\u00a0are similar to the centralized model.\u00a0You still need to pull code down\u00a0from the server to view the latest changes.\u00a0The key difference is that every user\u00a0is essentially a server and not a client.\u00a0This means that every time you pull\u00a0down code from the distributed model,\u00a0you have the entire history of\u00a0changes on your local system.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#differance","title":"Differance","text":"<p>The advantage of CVCS is that they are\u00a0considered easier to learn\u00a0than their distributed counterparts.\u00a0They also give more access controls to users.\u00a0The disadvantage is that they\u00a0can be slower given that you need\u00a0to establish a connection to\u00a0the server to perform any actions.\u00a0With DVCS, you don't need to be connected to\u00a0the server to add your changes or view a file's history.\u00a0It works as if you are actually connected to the server\u00a0directly but on your own local machine.\u00a0You only ever need to connect to the server to pull\u00a0down the latest changes or to push your own changes.\u00a0It essentially allows users to work in an offline state.\u00a0Speed and performance are also\u00a0better than its CVCS counterpart.\u00a0DVCS is a key factor in improving\u00a0developer operations and\u00a0the software development life cycle.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#a-history-of-version-control","title":"A history of version control","text":"<p>As you know by now, version control is a system that records changes to a file or set of files over time so that you can access specific versions later. In software development, Version Control Systems (VCS) allows developers to manage changes to their code and track who made each change. But how did this software come about?</p> <p>Version Control has a long history going back to the 1980s. In fact, version control systems were created before the Internet!</p> <p>One of the first significant Version Control Systems was the Concurrent Versions System (CVS). It was first developed in 1986 by Walter F. Tichy at Purdue University and released publicly in 1990.</p> <p>CVS stores information about every file in a folder structure, including the name of the file, its location in the folder structure, who last modified it, and when it was last modified. The CVS also stores information about folders, including their names and who created them.</p> <p>It was popular for many years; however, it has some significant flaws in its design. CVS does not include integrity checks which means your data can become corrupted. When you update or submit changes to the system, if an error occurs, the system accepts the partial or corrupted files. Additionally, the system was designed mainly for text files, not binary files such as images or videos.</p> <p>The main successor to CVS was Subversion (SVN).</p> <p>CollabNet developed Subversion in 2000 and solved many of the issues present in CVS. To ensure data integrity, it included integrity checks in its design. It also supported the versioning of binary files better than CVS. Thanks to these improvements, SVN became popular in the open-source community with free hosting being offered for open-source projects by Google and SourceForge.</p> <p>However, Subversion used a centralized VCS model. This means that all operations have to be done using a centralized server. If the server were down or slow, this would impede development.</p> <p>In 2005, two new projects were started to develop distributed version control systems; Mercurial and Git. Both projects were created in response to an event involving the Linux kernel development.</p> <p>Previously, the Linux kernel was using a proprietary VCS known as BitKeeper. BitKeeper was one of the first distributed version control systems initially released in 2000. BitKeeper had originally provided a free license to Linus Torvalds to support Linux\u2019s development. However, in 2005, the license was revoked. This controversy led to the creation of the Mercurial and Git projects.</p> <p>Mercurial was developed by Olivia Mackal. It is developed as a high-performance distributed VCS. Many platforms offering Subversion hosting began to offer Mercurial hosting too. It became popular as Subversion users found it easy to transition to a Mercurial repository, thanks to the hosting providers and its small learning curve.</p> <p>Git was developed by Linus Torvalds to host the Linux kernel\u2019s source code. Like Mercurial, it is a distributed VCS. Its first public release came in 2007.</p> <p>Git became popular in the open-source community due to its distributed VCS design and Github offering free Git hosting for open-source projects. Git has since become the selected version control system for many open-source and proprietary software projects.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#version-control-in-professional-software-development","title":"Version control in professional software development","text":"<p>Version Control plays a crucial part in software development. As a developer, you\u2019ll work with other developers on projects to deliver software to customers. Depending on the role, you could be working with a small team of 2 or 3 developers in a single project or a large team spanning multiple projects. In either scenario, Version Control will be a crucial tool to help your team succeed.</p> <p>However, Version Control must be complemented by other tools and procedures to ensure quality and efficiency throughout the software development process. In this lesson, we\u2019ll explore some of the common tools and strategies developers use in conjunction with Version Control.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#workflow","title":"Workflow","text":"<p>Using Version Control without a proper workflow is like building a city without traffic lights; without appropriate management, everything will turn into chaos.</p> <p>For example, let\u2019s say you\u2019re working on a big project and editing a file. Another developer also starts editing a file. Both of you submit the file to the VCS at the same time. Now there\u2019s a conflict! How should the conflict be resolved? A good workflow will have a process for resolving conflicts.</p> <p>Another example is when a new junior developer is joining your team. If the project code is used for a critical system, it is risky to allow them to submit code changes directly. To solve this, many developers use a peer review system where another developer must review code before it can be merged in.</p> <p>Workflows are essential to ensure code is managed correctly and reduce mistakes from happening. Different projects will have different workflows. In this course, you\u2019ll learn some common workflows using the Git Version Control System.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#continuous-integration","title":"Continuous Integration","text":"<p>Continuous Integration, or CI, is used to automate the integration of code changes from multiple developers into a single main stream. Using a workflow whereby small changes are merged frequently, often many times per day, will reduce the number of merge conflicts.</p> <p>This process is widespread in test-driven software development strategies. CI is often used to automatically compile the project and run tests on every code change to ensure that the build remains stable and prevent regressions in functionality.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#continuous-delivery","title":"Continuous Delivery","text":"<p>Continuous Delivery is an extension of Continuous Integration. Once the changes have been merged into the main stream, a Continuous Delivery system automatically packages the application and prepares it for deployment. This helps avoid human error when packaging the application.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#continuous-deployment","title":"Continuous Deployment","text":"<p>Continuous Deployment is an extension of Continuous Delivery. The goal of Continuous Deployment is to deploy and release software to customers frequently and safely. The strategy commonly involves automatically deploying to a test (also known as staging) environment first to validate the deployment package and software changes. Once validated, it can automatically deploy to the live (also known as production) environment for customers.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#conclusion","title":"Conclusion","text":"<p>With these tools and procedures, it is possible to understand how software starts from a developer writing code to being deployed live for customers to use. Of course, there is much more to running a live software service, but that is a lesson for another day.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#staging-vs-production","title":"Staging vs. Production","text":""},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#development-environments","title":"Development Environments","text":"<p>Every development team prior to releasing their new features or changes needs to verify that the code they do release is not going to cause any issues or bugs. In order to achieve this, they normally set up multiple environments for different ways to test and verify. A common practice is for teams to have a developer environment, a UAT or QA environment, and a staging environment. The main purpose of this flow is to find any potential issues that may arise due to changes or new features being added to the codebase. The more ways to test the changes the less likely bugs will be introduced.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#staging","title":"Staging","text":"<p>The staging environment should mimic your production environment. The reason for this is because you want to test the code in an environment that matches what you have in production. This allows teams to spot or find any potential issues prior to them getting to production. The closer the staging environment is to your production, the more accurate your testing is going to be. Staging environments can also be used for testing and verifying new features and allow other teams including QA or stakeholders to see and use those features as a pre-trial. Staging should also cover all areas of the architecture of the application including the database and any other services that may be required. Areas that benefit from staging environments include:</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#new-features","title":"New Features","text":"<p>Developers submitting new features along with feature flags for turning them on and off should always do a testing round in a staging environment. They allow teams to verify that the feature works, it can be turned on and off via configuration flags and also that it does not break or interfere with existing functionality.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#testing","title":"Testing","text":"<p>As the staging environment mimics your production environment, it's also a great place to run tests. QA teams will normally use it to verify new features, configuration changes or software updates/patching. The types of testing covered will be Unit testing, Integration testing and performance testing. All except performance testing can also be carried out in production. Performance can also be completed in production but only at specific times - usually out of hours as it will have a drastic effect on the user experience.</p> <p>Sometimes it is not always feasible to have an exact replication either due to costs or time. Certain areas can be cut back - for example, if your service is load balanced on 10 virtual machines in production, you could still have 4 virtual machines in staging. The underlying architecture is the same but the overall performance may be different.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#migrations","title":"Migrations","text":"<p>Staging is a perfect place to test and verify data migrations. Snapshots can be taken from production and used to test your migration scripts to confirm your changes will not break anything. If in the case it does cause an issue, you simply rollback and try again. Doing something like a migration in production is extremely risky and error-prone.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#configuration-changes","title":"Configuration Changes","text":"<p>Configuration can also cause headaches for teams, especially in a large cloud-based architecture. Having a staging environment will allow you to spot any potential issues or bottlenecks.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#production","title":"Production","text":"<p>Production is live. It's out there for people to see and/or interact with. Any issues or problems you may have had should have been caught and fixed in the staging environment. The staging area gives the team a safety net to catch these possible issues. Any code that is deployed to production should have been tested and verified before the deployment itself.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#downtime","title":"Downtime","text":"<p>Downtime for any service especially customer facing will most likely be revenue impacting. If customers can not access or use your website or app to its full capabilities, it will most likely have a cost involved. Take for example an e-commerce company that allows users to buy goods and services online. If they release a new feature to their shopping cart which actually breaks the payment process, this will have an impact on customers not being able to buy goods online.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#vulnerabilities","title":"Vulnerabilities","text":"<p>Cyber-security should also play a big role in what gets released in production. Any updates to software such as patching or moving to the latest version should be checked and verified. This is also the same rule for not upgrading software when critical updates are released.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#reputation","title":"Reputation","text":"<p>Downtime or issues in production is damaging for a company as it does not instill confidence in end users. If something is down or broken it can cause the company to lose potential customers.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week1/#additional-resources","title":"Additional Resources","text":"<p>About Version Control</p> <p>https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control</p> <p>List of Version Control Software</p> <p>https://en.wikipedia.org/wiki/List_of_version-control_software</p> <p>The benefits of a distributed version control system</p> <p>https://about.gitlab.com/topics/version-control/benefits-distributed-version-control-system/</p> <p>What is Cloning?</p> <p>https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/","title":"Unix Commands","text":""},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#using-bash-on-mac-terminal","title":"Using Bash on Mac Terminal","text":""},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Learners will understand how to open the command line - terminal on mac</li> <li>Learners will become familiar with the most common commands.</li> </ul>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#mac-terminal","title":"Mac Terminal","text":"<p>The Terminal on Mac can be open in one of three ways, Finder, Launch Pad and Spotlight.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#finder","title":"Finder","text":"<ol> <li>Scroll to the bottom on your desktop and click on the Finder icon</li> <li>Click on Applications on the left hand side</li> <li>Locate the folder called Utilities and expand it</li> <li>The Terminal app should be visible, click it to open</li> </ol>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#launch-pad","title":"Launch Pad","text":"<ol> <li>Press the F4 command</li> <li>Launch Pad view will appear</li> <li>In the search bar, click it and type the word Term - short for terminal</li> <li>The Terminal icon will appear on screen</li> <li>Click to open</li> </ol>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#spotlight","title":"Spotlight","text":"<ol> <li>Press the Command Key and the Space Bar</li> <li>The Spotlight modal will appear</li> <li>Type in the word Terminal or Term for short</li> <li>The Terminal icon will appear</li> <li>Click to open</li> </ol>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#bash-commands","title":"Bash commands","text":"<p>Bash provides a list of commands that helps you navigate through files, view contents of files and also edit features to change or update the contents of a file. Below is a list of the most common commands:</p> Command Used for <code>cd</code> Change Directory <code>ls</code> List command used for showing the content of a directory. <code>rm</code> Remove command used for removing a file or a directory <code>mv</code> Used to move files or folders to another location <code>touch</code> Allows creating of a new empty file or to upate a timestamp on a file <code>cp</code> Used to make a copy of a file or folder <code>mkdir</code> Make a new directory <code>pwd</code> Print work directory, shows the current location in the shell <code>cat</code> Allows reading or concatenation of a file <code>less</code> Displays the contents of a file one page at a time. <code>grep</code> Global regular expression, allows for searching contents of files or folders"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#flags","title":"Flags","text":"<p>Every bash command has flags which will allow you to change the output of the command itself. For example, the ls command is used to print out the list of contents inside a directory. If we wanted to show the list in a different view, we simply need to add a flag such as -l.</p> <p></p> <p>When the flag of\u00a0-l\u00a0is passed it will show the output in a different way:</p> <p></p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#man-pages","title":"Man Pages","text":"<p>When first starting to learn commands from bash it can feel a bit dauting. Luckily every command comes with its own manual or man pages for short. The man page will list all the flags and options that a particular command has to offer. Again, lets use the\u00a0ls\u00a0command to demonstrate this. Type the following:</p> <pre><code>man\u00a0ls\n</code></pre> <p></p> <p>The man pages are a great way to recall the different flags that are available and a great tool in your arsenal to becoming more fluent in bash.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#editing","title":"Editing","text":"<p>To edit files in bash you have quiet a few options. The most common though is usually VI or Vim. VI stands for visual editor and it allows you to make edits and changes to a file and save them. Its very similar to what you may have used in applications like word. VIM is a better version of VI with some improvements - hense its name visual editor improved. Learning the different commands in Vim will feel a bit different coming from GUI applications but once you practice it will feel like second nature. Vim uses modes to determine the commands you can work with:</p> <ul> <li>Normal mode: Default mode</li> <li>Insert mode: Allows the contents of the files to be edited.</li> <li>Command line mode: Normal commands begin with\u00a0:</li> </ul> <pre><code>ls -l /bin/usr &gt; /tmp/error.txt\n## ls: /bin/usr: No such file or directory\n</code></pre> <pre><code>ls -l /bin/usr 2&gt; /tmp/error.txt\ncat /tmp/error.txt\n## ls: /bin/usr: No such file or directory\n</code></pre>"},{"location":"VCS-Course-2/Version-Control-Systems-Week2/#additional-resources","title":"Additional Resources","text":"<p>Agile methodologies</p> <p>https://www.planview.com/resources/guide/agile-methodologies-a-beginners-guide/</p> <p>Installing git on mac and windows, detailed instructions.</p> <p>https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</p> <p>Bash Reference Manual</p> <p>https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents</p> <p>Bash Redirections</p> <p>https://www.gnu.org/software/bash/manual/html_node/Redirections.html#Redirections</p> <p>Bash Cheatsheet</p> <p>https://devhints.io/bash</p> <p>Grep Cheatsheet</p> <p>https://devhints.io/grep</p> <p>Grep Manual</p> <p>https://man7.org/linux/man-pages/man1/grep.1.html</p> <p>History and Timeline of Unix</p> <p>https://unix.org/what_is_unix/history_timeline.html</p> <p>History of Vim</p> <p>https://en.wikipedia.org/wiki/Vim_(text_editor)</p> <p>How to work with relative and absolute paths</p> <p>https://www.geeksforgeeks.org/absolute-relative-pathnames-unix/</p> <p>Unix Commands Cheatsheet</p> <p>https://cheatography.com/jluis/cheat-sheets/bash-and-unix-commands/</p> <p>Vim Cheatsheet</p> <p>https://vim.rtorr.com/</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/","title":"Installing Git on Mac","text":"<p>Git works on all operating system platforms such as Windows, Mac, and Linux. On Mac or Linux, in some cases, it is installed by default. The majority of users will use Git via the command line as its syntax is very easy to understand and follow. Git also works well in development environments and integrates into IDEs and other GUI offerings.</p> <p>Macs tend to have git installed by default, so before diving into the installation we can run a git version command to check if git is already installed. If the command returns a git version, then git is already installed. If it returns \"command not found\", git needs to be installed.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#install-with-xcode","title":"Install with Xcode","text":"<p>Install the latest version of Xcode for your Mac by downloading it from the Apple Store or going to the official website -\u00a0https://developer.apple.com/xcode/</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#install-git-from-homebrew","title":"Install Git from Homebrew","text":"<p>Homebrew is a popular package manager for Macs. It\u2019s easy to use and makes it simple to install new packages such as git. First, you will need to install Homebrew on your machine. Go to the Homebrew website at https://brew.sh/ and follow the install instructions for Mac. Once Homebrew is installed, open a terminal window and then type the command brew install git</p> <p>Once installed run the git version command to verify the installation is complete.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#resolving-conflicts","title":"Resolving conflicts","text":"<p>Conflicts will normally occur when you try to merge a branch that may have competing changes. Git will normally try to automatically merge (auto-merge), but in the case of a conflict it will need some confirmation, the competing changes need to be resolved by the end user. This process is called merging or rebasing.</p> <p>The developer must look at the changes on the server and the changes on their local and validate which changes should be resolved.</p> <p>A merge conflict example is when two developers are working on their own dependent branches. Both developers are working on the same file called Feature.js. Each of their tasks is to add a new feature to an existing method. Developer 1 has a branch called feature1 and developer 2 has a branch called feature2.</p> <p>Developer 1 pushes the code with the changes to the remote repository. Developer 2 pushes their changes.</p> <p></p> <p>Demonstration of the push pull method</p> <p>Let's walk through how this would happen in Git. Both developers 1 and 2 checkout the main repository on Monday morning. They both have the exact same copy. Both developers checkout a new branch - feature 1 and 2.</p> <pre><code>git\u00a0pull\ngit\u00a0checkout\u00a0-b\u00a0feature1\n</code></pre> <pre><code>git\u00a0pull\ngit\u00a0checkout\u00a0-b\u00a0feature2\n</code></pre> <p>Developer 1 makes their changes to a file called Feature.js and then commits the changes to the repository for approval via a PR (pull request)</p> <pre><code>git\u00a0add\u00a0Feature.js\ngit\u00a0commit\u00a0-m\u00a0'chore:\u00a0added\u00a0feature\u00a01!!'\ngit\u00a0pull\u00a0origin\u00a0main\ngit\u00a0push\u00a0-u\u00a0origin\u00a0feature1\n</code></pre> <p>The PR is reviewed and then merged into the main branch. Meanwhile Developer 2 is starting to code on his feature. Again, they go through the same process as Developer 1:</p> <pre><code>git\u00a0add\u00a0Feature.js\ngit\u00a0commit\u00a0-m\u00a0'chore:\u00a0added\u00a0feature\u00a02!!!'\ngit\u00a0pull\u00a0origin\u00a0main\ngit\u00a0add\u00a0Feature.js\ngit\u00a0commit\u00a0-m\u00a0'chore:\u00a0added\u00a0feature\u00a02!!!'\ngit\u00a0pull\u00a0origin\u00a0main\n</code></pre> <pre><code>From\u00a0github.com:demo/demo-repo\n\n\u00a0*\u00a0branch\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0main\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-&gt;\u00a0FETCH_HEAD\n\n\u00a0\u00a0\u00a09012934..d3b3cc0\u00a0\u00a0main\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-&gt;\u00a0origin/main\n\nAuto-merging\u00a0Feature.js\n\nCONFLICT\u00a0(content):\u00a0Merge\u00a0conflict\u00a0in\u00a0Feature.js\n\nAutomatic\u00a0merge\u00a0failed;\u00a0fix\u00a0conflicts\u00a0and\u00a0then\u00a0commit\u00a0the\u00a0result.\n</code></pre> <p>Git lets us know that a merge conflict has occurred and needs to be fixed before it can be pushed to the remote repo. Running git status will also give us the same level of detail:</p> <pre><code>git\u00a0status\n</code></pre> <pre><code>On\u00a0branch\u00a0feature2\n\nYou\u00a0have\u00a0unmerged\u00a0paths.\n\n\u00a0\u00a0(fix\u00a0conflicts\u00a0and\u00a0run\u00a0\"git\u00a0commit\")\n\n\u00a0\u00a0(use\u00a0\"git\u00a0merge\u00a0--abort\"\u00a0to\u00a0abort\u00a0the\u00a0merge)\n\nUnmerged\u00a0paths:\n\n\u00a0\u00a0(use\u00a0\"git\u00a0add\u00a0&lt;file&gt;...\"\u00a0to\u00a0mark\u00a0resolution)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0both\u00a0modified:\u00a0\u00a0\u00a0Feature.js\n\nno\u00a0changes\u00a0added\u00a0to\u00a0commit\u00a0(use\u00a0\"git\u00a0add\"\u00a0and/or\u00a0\"git\u00a0commit\u00a0-a\")\n</code></pre> <p>In order to merge, Developer 2 needs to see and compare the changes from Developer 1. It is good practice to first see what branch is causing the merge issue. Developer 1 runs the following command:</p> <pre><code>git\u00a0log\u00a0--merge\n</code></pre> <pre><code>commit\u00a079bca730b68e5045b38b96bec35ad374f44fe4e3\u00a0(HEAD\u00a0-&gt;\u00a0feature2)\n\nAuthor:\u00a0Developer\u00a02\u00a0\n\n&lt;developer2@demo.com&gt;\n\nDate:\u00a0\u00a0\u00a0Sat\u00a0Jan\u00a029\u00a016:55:40\u00a02022\u00a0+0000\n\n\u00a0\u00a0\u00a0\u00a0chore:\u00a0add\u00a0feature\u00a02\n\ncommit\u00a0678b0648107b7c53e90682f2eb8103c59f3cb0c0\n\nAuthor:\u00a0Developer\u00a01\u00a0\n\n&lt;developer1@demo.com&gt;\n\nDate:\u00a0\u00a0\u00a0Sat\u00a0Jan\u00a029\u00a016:53:40\u00a02022\u00a0+0000\n\n\u00a0\u00a0\u00a0\u00a0chore:\u00a0add\u00a0feature\u00a01\n</code></pre> <p>We can see from the above that the team conflicting changes occurred in feature 1 and 2 branches. Developer 1 now wants to see the change that is causing the conflict.</p> <pre><code>git\u00a0diff\n\ndiff\u00a0--cc\u00a0Feature.js\n</code></pre> <pre><code>index\u00a01b1136f,c3be92f..0000000\n\n---\u00a0a/Feature.js\n\n+++\u00a0b/Feature.js\n\n@@@\u00a0-1,4\u00a0-1,4\u00a0+1,8\u00a0@@@\n\n\u00a0\u00a0let\u00a0add\u00a0=\u00a0(a,\u00a0b)\u00a0=&gt;\u00a0{\n\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt;\u00a0HEAD\n\n\u00a0+\u00a0\u00a0if(a\u00a0+\u00a0b\u00a0&gt;\u00a010)\u00a0{\u00a0return\u00a0'way\u00a0too\u00a0much'}\n\n++=======\n\n+\u00a0\u00a0\u00a0if(a\u00a0+\u00a0b\u00a0&gt;\u00a010){\u00a0return\u00a0'too\u00a0much'\u00a0}\n\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt;\u00a0d3b3cc0d9b6b084eef3e0afe111adf9fe612898e\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0a\u00a0+\u00a0b;\n\n\u00a0\u00a0}\n</code></pre> <p>The only difference is the wording in the return statement. Developer 1 added 'too much' but Developer 2 added 'way too much. Everything else is identical so in terms of merging and it's a pretty easy fix. Git will show arrows &lt;&lt;&lt; &gt;&gt;&gt; to signify the changes. Developer 1 removes the markers so the code is ready for being submitted:</p> <pre><code>let\u00a0add\u00a0=\u00a0(a,\u00a0b)\u00a0=&gt;\u00a0{\n\n\u00a0\u00a0if(a\u00a0+\u00a0b\u00a0&gt;\u00a010)\u00a0{\u00a0return\u00a0'way\u00a0too\u00a0much'}\n\n\u00a0\u00a0return\u00a0a\u00a0+\u00a0b;\n\n}\n</code></pre> <pre><code>\u00a0git\u00a0add\u00a0Feature.js\n\ngit\u00a0commit\u00a0-m\u00a0'fix\u00a0merge\u00a0conflicts'\ngit\u00a0push\u00a0-u\u00a0origin\u00a0feature2\n</code></pre> <p>Developer 2 has now fixed a merge conflict and can create their PR to get the code merged into the main line.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#diff-commands","title":"diff commands","text":"<pre><code>git diff HEAD README.md\ngit log --pretty=oneline\n</code></pre>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#blame-command","title":"blame command","text":"<ul> <li>Show history in line 5 to 15 :</li> </ul> <pre><code>git blame -L 5,15 README.md\n</code></pre> <ul> <li>Show history in verbose format:</li> </ul> <pre><code>git blame -l README.md\n</code></pre> <ul> <li>Output format</li> </ul> <pre><code>&lt;ID&gt;&lt;Author&gt;&lt;Date&gt;&lt;Time&gt;&lt;Line number&gt;&lt;Content&gt;\n</code></pre>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#forking","title":"Forking","text":"<p>In previous lessons, you have touched on workflows such as branching and how they can be used to simplify a process for a team. Forking is another type of workflow. The key difference between branching and forking is that the workflow for forking creates a new repository entirely. Branching cuts a new branch from the same repository each time and each member of the team works on the single repository.</p> <p>Let's take a simple example of how forking works. In the diagram below the coolgame repo has been forked by Joe. The entire contents and the history of the repository are now stored in Joe's account on GitHub. Joe is now free to make edits and changes to the repository at his own will. You, the owner of the coolgame repository can continue to work as normal and not know about Joe's edits or changes.</p> <p>Joe created a new branch on his repository and added a new cool feature that he felt was needed. In order for Joe to get his feature back into the original repository, he will need to create a PR as normal but instead of comparing with the main branch, it needs to be compared with the original repository. Essentially the two repositories are compared against each other. The owner of the original repository can then review the PR and choose to accept of decline the new feature.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#forking_1","title":"Forking","text":"<p>Let us take a look at how you can fork an existing repository that is available on GitHub. For this example, let's fork the\u00a0forking lesson\u00a0repository.</p> <p>Step 1:\u00a0Go to\u00a0https://github.com/Meta-Front-End-Developer-PC/forking-lesson</p> <p>Step 2:\u00a0Click on the Fork button on the top right of the page.</p> <p>Step 3:\u00a0It will then prompt you to fork the repository to your desired account. Choose the account you wish to fork to.</p> <p>Step 4:\u00a0Github will then clone the repository into your chosen GitHub account.</p> <p>In a couple of steps, you have successfully forked a repository into our own GitHub account. The full repository is cloned and allows us to work directly in that repository as if it was our own.</p> <p>On the landing page of the GitHub repository, it will show directly under the repository name that it was forked from Meta-Front-End-Developer-PC/forking-lesson.</p> <p>Other subtle differences in the GitHub UI on a forked branch is the top information bar above the files.</p> <p>It now shows that the branch is up to date with forking-lesson:main. It also adds a Fetch upstream drop-down to allow you to pull and merge the latest changes from the original repository.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#example","title":"Example","text":"<p>Let's run through a typical flow of creating a new branch and adding some new content.</p> <p>Step 1:\u00a0Clone the repository.</p> <p>Step 2:\u00a0Create a new branch.</p> <p>git checkout -b test/forking-example</p> <p>Step 4:\u00a0Create a new file and commit it to the repository.</p> <p>touch text.txt git add . git commit -m 'chore: testing'</p> <p>Step 5\u00a0Push the branch to your remote repository.</p> <p>git push -u origin test/forking-example</p> <p>Step 6:\u00a0Go to Github and click the Compare &amp; pull request button. If it's not available, click on the branch dropdown button and change it from main to the branch name of test/forking-example:</p> <p>After clicking the Compare &amp; pull request button it will now redirect to the original repository in order to create the PR.</p> <p>Each repository will have its own guidelines for submitting PRs against them and usually provide a how-to contribute guide. As you can see, in order to get the changes from our forked repository, you need to compare it against the original. This gives a lot of control to the repository owners of the original and they get to decide what makes the cut to be merged in.</p> <p>In this lesson you covered the basics of forking a repository, adding some changes, and then creating a PR to get it back to the original repository.</p>"},{"location":"VCS-Course-2/Version-Control-Systems-Week3/#additional-resources","title":"Additional Resources","text":"<p>GitHub: Pricing</p> <p>GitHub is free to use, but it also offers different pricing models to suit the needs of different-sized teams and organizations. Check out the link below:</p> <p>https://github.com/pricing</p> <p>Git: An Origin Story</p> <p>https://www.linuxjournal.com/content/git-origin-story</p> <p>Git Cheatsheet</p> <p>https://education.github.com/git-cheat-sheet-education.pdf</p> <p>Git patterns and anti-patterns for successful developers</p> <p>https://youtu.be/t_4lLR6F_yk</p> <p>Tech Talk: Linus Torvalds on git</p> <p>https://www.youtube.com/watch?v=4XpnKHJAok8</p> <p>Vim Cheatsheet</p> <p>https://devhints.io/vim</p>"}]}